{"id":1229479324,"question_id":53,"lang":"java","lang_name":"Java","time":"4 days, 20 hours","timestamp":1712841678,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1229479324/","is_pending":"Not Pending","title":"Maximum Subarray","memory":"N/A","code":"class Solution {\n    public int maxSubArray(int[] nums) {\n        int maxSum = 0, currSum = 0;\n        int n = nums.length;\n        for (int i : nums){\n            currSum += i;\n            if(currSum > maxSum) maxSum = currSum;\n        } \n        return maxSum;    \n    }\n}\n\n// [-2,1,-3,4,-1,2,1,-5,4]\n\n// -2\n// -2 < -2+1 : 1\n// 1 > 1-3 : 1 when faced something that coudn't change currSum = 0, maxSum =\n// -3 < 4 : 4\n// 4 > 4-1: 4 currSum = 3\n\n\n\n","compare_result":"011100001110101101010111101101110010010000010110011111011010110111100100110010001010010001010110010001001011011000100000100001100111001010010010100100101011001101011100100001110000000000111000000100000000000101","title_slug":"maximum-subarray","has_notes":false,"flag_type":1}