{"id":1191735929,"question_id":78,"lang":"java","lang_name":"Java","time":"1 month, 2 weeks","timestamp":1709394722,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1191735929/","is_pending":"Not Pending","title":"Subsets","memory":"42.3 MB","code":"// using bitmasking\nclass Solution {\n    public List<List<Integer>> subsets(int[] nums) {\n        List<List<Integer>> subsets = new ArrayList<>();\n        int n = nums.length;\n        \n        // Iterate through all possible numbers from 0 to 2^n - 1\n        for (int i = 0; i < (1 << n); i++) {\n            List<Integer> subset = new ArrayList<>();\n            \n            // Iterate through each bit of the current number\n            for (int j = 0; j < n; j++) {\n                if ((i & (1 << j)) > 0) {\n                    subset.add(nums[j]); // Include nums[j] in the subset\n                }\n            }\n            subsets.add(subset); // Add the subset to the list of subsets\n        }\n        return subsets;\n    }\n}\n","compare_result":"1111111111","title_slug":"subsets","has_notes":false,"flag_type":1}