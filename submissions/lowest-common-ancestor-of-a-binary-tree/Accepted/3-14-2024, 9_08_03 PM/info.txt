{"id":1203589827,"question_id":236,"lang":"java","lang_name":"Java","time":"1Â month","timestamp":1710430683,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/1203589827/","is_pending":"Not Pending","title":"Lowest Common Ancestor of a Binary Tree","memory":"44.7 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n\n        /*1. At each node, we check if given node is one of -> p or q. If so, we return the current node. */\n        if (root == null || root == p || root == q) return root;\n\n        // 2. Then, search LCA in left & right subtrees.\n        \n        TreeNode left = lowestCommonAncestor(root.left, p, q);\n        TreeNode right = lowestCommonAncestor(root.right, p, q);\n\n        // return left == null ? right : (right == null ? left : root);\n        // 2.1.If both subtrees returns non-null, current node is LCA.\n// Otherwise, if only 1 subtree returns a non-null, that subtree's result is the LCA.\n\n        if (left == null) return right;\n\t    else if (right == null) return left;\n\t    else return root; \n    }\n}","compare_result":"11111111111111111111111111111111","title_slug":"lowest-common-ancestor-of-a-binary-tree","has_notes":false,"flag_type":1}