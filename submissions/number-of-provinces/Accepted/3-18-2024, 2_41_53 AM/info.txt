{"id":1206670486,"question_id":547,"lang":"java","lang_name":"Java","time":"4 weeks, 1 day","timestamp":1710709913,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1206670486/","is_pending":"Not Pending","title":"Number of Provinces","memory":"48.1 MB","code":"// adjacency matrix\n// simple way is just do noemal dfs traversal of the graph\nclass Solution {\n    public int findCircleNum(int[][] isConnected) {\n        int n = isConnected.length;\n        boolean[] visited = new boolean[n]; // to keep count of visited nodes\n        int count = 0;\n        \n        for (int i = 0; i < n; i++) {\n            if (!visited[i]) {\n                dfs(isConnected, visited, i);\n                count++;\n            }\n        }\n        \n        return count;\n    }\n    \n    private void dfs(int[][] isConnected, boolean[] visited, int node) {\n        visited[node] = true;\n        for (int i = 0; i < isConnected.length; i++) {\n            if (isConnected[node][i] == 1 && !visited[i]) {\n                dfs(isConnected, visited, i);\n            }\n        }\n    }\n}\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"number-of-provinces","has_notes":false,"flag_type":1}