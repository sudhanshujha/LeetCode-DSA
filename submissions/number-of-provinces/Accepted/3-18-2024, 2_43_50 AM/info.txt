{"id":1206671461,"question_id":547,"lang":"java","lang_name":"Java","time":"4 weeks, 1 day","timestamp":1710710030,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1206671461/","is_pending":"Not Pending","title":"Number of Provinces","memory":"47.6 MB","code":"class Solution {\n    public int findCircleNum(int[][] isConnected) {\n        int n = isConnected.length;\n        UnionFind uf = new UnionFind(n);\n\n        // Union connected cities\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (isConnected[i][j] == 1) {\n                    uf.union(i, j);\n                }\n            }\n        }\n\n        // Count the number of disjoint sets\n        return uf.count();\n    }\n}\n\nclass UnionFind {\n    private int[] parent;\n    private int[] rank;\n    private int count;\n\n    public UnionFind(int n) {\n        parent = new int[n];\n        rank = new int[n];\n        count = n;\n        for (int i = 0; i < n; i++) {\n            parent[i] = i;\n            rank[i] = 1;\n        }\n    }\n\n    public int find(int x) {\n        if (parent[x] != x) {\n            parent[x] = find(parent[x]);\n        }\n        return parent[x];\n    }\n\n    public void union(int x, int y) {\n        int rootX = find(x);\n        int rootY = find(y);\n        if (rootX != rootY) {\n            if (rank[rootX] > rank[rootY]) {\n                parent[rootY] = rootX;\n            } else if (rank[rootX] < rank[rootY]) {\n                parent[rootX] = rootY;\n            } else {\n                parent[rootY] = rootX;\n                rank[rootX]++;\n            }\n            count--;\n        }\n    }\n\n    public int count() {\n        return count;\n    }\n}\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"number-of-provinces","has_notes":false,"flag_type":1}