{"id":1182999797,"question_id":208,"lang":"java","lang_name":"Java","time":"1 month, 3 weeks","timestamp":1708605258,"status":10,"status_display":"Accepted","runtime":"40 ms","url":"/submissions/detail/1182999797/","is_pending":"Not Pending","title":"Implement Trie (Prefix Tree)","memory":"59.8 MB","code":"class Node {\n    Node links[] = new Node[26]; \n    boolean flag = false; \n    \n    public Node() {\n    }\n    \n    boolean containsKey(char ch) {\n        return (links[ch - 'a'] != null); \n    }\n    Node get(char ch) {\n        return links[ch-'a']; \n    }\n    void put(char ch, Node node) {\n        links[ch-'a'] = node; \n    }\n    void setEnd() {\n        flag = true; \n    }\n    boolean isEnd() {\n        return flag; \n    }\n};\n\nclass Trie {\n\nprivate static Node root; \n\n    //Initialize your data structure here\n\n    Trie() {\n        root = new Node(); \n    }\n\n\n    //Inserts a word into the trie\n\n    public static void insert(String word) {\n        Node node = root;\n        for(int i = 0;i<word.length();i++) {\n            if(!node.containsKey(word.charAt(i))) {\n                node.put(word.charAt(i), new Node()); \n            }\n            node = node.get(word.charAt(i)); \n        }\n        node.setEnd(); \n    }\n \n //Returns if the word is in the trie\n\n    public static boolean search(String word) {\n        Node node = root; \n        for(int i = 0;i<word.length();i++) {\n            if(!node.containsKey(word.charAt(i))) {\n                return false; \n            }\n            node = node.get(word.charAt(i)); \n        }\n        if(node.isEnd()) {\n            return true; \n        }\n        return false; \n    }\n\n    \n    //Returns if there is any word in the trie that starts with the given prefix\n\n    public static boolean startsWith(String prefix) {\n        Node node = root; \n        for(int i = 0;i<prefix.length();i++) {\n            if(!node.containsKey(prefix.charAt(i))) {\n                return false; \n            }\n            node = node.get(prefix.charAt(i)); \n        }\n        return true; \n    }\n}\n\n/**\n * Your Trie object will be instantiated and called as such:\n * Trie obj = new Trie();\n * obj.insert(word);\n * boolean param_2 = obj.search(word);\n * boolean param_3 = obj.startsWith(prefix);\n */","compare_result":"1111111111111111","title_slug":"implement-trie-prefix-tree","has_notes":false,"flag_type":1}