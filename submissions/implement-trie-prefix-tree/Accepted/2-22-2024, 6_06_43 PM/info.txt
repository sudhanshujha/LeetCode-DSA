{"id":1183001375,"question_id":208,"lang":"java","lang_name":"Java","time":"1 month, 3 weeks","timestamp":1708605403,"status":10,"status_display":"Accepted","runtime":"33 ms","url":"/submissions/detail/1183001375/","is_pending":"Not Pending","title":"Implement Trie (Prefix Tree)","memory":"55.2 MB","code":"class Trie {\n    Node root;\n\n    public Trie() {\n        root = new Node();\n    }\n    \n    public void insert(String word) {\n        root.insert(word, 0);\n    }\n    \n    public boolean search(String word) {\n        return root.search(word, 0);\n    }\n    \n    public boolean startsWith(String prefix) {\n        return root.startsWith(prefix, 0);\n    }\n\n    class Node {\n        Node[] nodes;\n        boolean isEnd;\n\n        Node() {\n            nodes = new Node[26];\n        }\n\n        private void insert(String word, int idx) {\n            if (idx >= word.length()) return;\n            int i = word.charAt(idx) - 'a';\n            if (nodes[i] == null) {\n                nodes[i] = new Node();\n            }\n\n            if (idx == word.length()-1) nodes[i].isEnd = true;\n            nodes[i].insert(word, idx+1);\n        }\n\n        private boolean search(String word, int idx) {\n            if (idx >= word.length()) return false;\n            Node node = nodes[word.charAt(idx) - 'a'];\n            if (node == null) return false;\n            if (idx == word.length() - 1 && node.isEnd) return true;\n\n            return node.search(word, idx+1);\n\n        }\n\n        private boolean startsWith(String prefix, int idx) {\n            if (idx >= prefix.length()) return false;\n            Node node = nodes[prefix.charAt(idx) - 'a'];\n            if (node == null) return false;\n            if (idx == prefix.length() - 1) return true;\n\n            return node.startsWith(prefix, idx+1);\n        }\n    }\n}","compare_result":"1111111111111111","title_slug":"implement-trie-prefix-tree","has_notes":false,"flag_type":1}