{"id":1183002217,"question_id":208,"lang":"java","lang_name":"Java","time":"1 month, 3 weeks","timestamp":1708605477,"status":10,"status_display":"Accepted","runtime":"32 ms","url":"/submissions/detail/1183002217/","is_pending":"Not Pending","title":"Implement Trie (Prefix Tree)","memory":"55.6 MB","code":"class TrieNode {\n    boolean isWord;\n    TrieNode[] children;\n    \n    public TrieNode() {\n        isWord = false;\n        children = new TrieNode[26]; // 26 English lowercase letters\n    }\n}\n\nclass Trie {\n    TrieNode root;\n    \n    public Trie() {\n        root = new TrieNode();\n    }\n    \n    public void insert(String word) {\n        TrieNode node = root;\n        for (char c : word.toCharArray()) {\n            int index = c - 'a';\n            if (node.children[index] == null) {\n                node.children[index] = new TrieNode();\n            }\n            node = node.children[index];\n        }\n        node.isWord = true;\n    }\n    \n    public boolean search(String word) {\n        TrieNode node = root;\n        for (char c : word.toCharArray()) {\n            int index = c - 'a';\n            if (node.children[index] == null) {\n                return false;\n            }\n            node = node.children[index];\n        }\n        return node.isWord;\n    }\n    \n    public boolean startsWith(String prefix) {\n        TrieNode node = root;\n        for (char c : prefix.toCharArray()) {\n            int index = c - 'a';\n            if (node.children[index] == null) {\n                return false;\n            }\n            node = node.children[index];\n        }\n        return true;\n    }\n}\n","compare_result":"1111111111111111","title_slug":"implement-trie-prefix-tree","has_notes":false,"flag_type":1}