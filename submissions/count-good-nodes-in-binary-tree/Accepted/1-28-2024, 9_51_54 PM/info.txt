{"id":1159327940,"question_id":1544,"lang":"java","lang_name":"Java","time":"2 months, 2 weeks","timestamp":1706458914,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1159327940/","is_pending":"Not Pending","title":"Count Good Nodes in Binary Tree","memory":"52.6 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\n\nclass Solution {\n    int count = 0;\n    public int goodNodes(TreeNode root) {\n        int max = Integer.MIN_VALUE;\n        return dfs(root,max);\n    }\n\n    public int dfs(TreeNode root, int max){\n           if (root == null)\n            return 0;\n\n        // Pre-order\n        if (root.val >= max) {\n            max = root.val;\n            count++;\n        }\n     \n        dfs(root.left,max);\n        dfs(root.right,max);\n        return count;\n    }\n}\n\n// iterate the tree from root node.\n// root will always be a good so as there is no number to compare it with, count++\n// store root as max\n// now, go to left subtree, \n// if child value >= max \n//      update max & count++\n\n// else \n//     move on.\n//now, do the same for right subtree ","compare_result":"111111111111111111111111111111111111111111111111111111111111111","title_slug":"count-good-nodes-in-binary-tree","has_notes":false,"flag_type":1}