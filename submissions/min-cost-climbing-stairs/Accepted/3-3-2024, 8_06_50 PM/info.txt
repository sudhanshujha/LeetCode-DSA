{"id":1192708305,"question_id":747,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1709476610,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1192708305/","is_pending":"Not Pending","title":"Min Cost Climbing Stairs","memory":"43 MB","code":"class Solution {\n    public int minCostClimbingStairs(int[] cost) {\n        int n = cost.length;\n        // dp stores the minimum cost to climb to the top starting from the ith staircase.\n        int[] dp = new int[n + 1];\n\n        // Base cases: Cost to reach the first and second stairs is the cost of the respective stairs.\n        dp[0] = cost[0];\n        dp[1] = cost[1];\n\n        // Iterate through the stairs, calculating the minimum cost to reach each staircase.\n        for (int i = 2; i < n; i++) {\n            // The minimum cost to reach the current staircase is the cost of the current staircase\n            // plus the minimum cost of reaching the previous staircase or the one before that.\n            dp[i] = cost[i] + Math.min(dp[i - 1], dp[i - 2]);\n        }\n\n        // The minimum cost to reach the top is the minimum cost of reaching the last or second last staircase.\n        return Math.min(dp[n - 1], dp[n - 2]);\n    }\n}\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"min-cost-climbing-stairs","has_notes":true,"flag_type":1}