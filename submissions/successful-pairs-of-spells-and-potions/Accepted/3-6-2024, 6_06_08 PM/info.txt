{"id":1195697704,"question_id":2392,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1709728568,"status":10,"status_display":"Accepted","runtime":"41 ms","url":"/submissions/detail/1195697704/","is_pending":"Not Pending","title":"Successful Pairs of Spells and Potions","memory":"64.7 MB","code":"import java.util.Arrays;\n\nclass Solution {\n    public int[] successfulPairs(int[] spells, int[] potions, long success) {\n        Arrays.sort(potions); // Sort the potions array\n        int n = spells.length;\n        int m = potions.length;\n        \n        int[] successfulPairs = new int[n]; // Array to store the count of successful pairs\n        \n        for (int i = 0; i < n; i++) {\n            int target = (int) Math.ceil((double) success / spells[i]); // Round up to ensure we get at least the required strength\n            \n            int left = 0;\n            int right = potions.length - 1;\n            int count = 0; // Initialize count for the current spell\n            \n            // Binary search to find the number of successful potions for the current spell\n            while (left <= right) {\n                int mid = left + (right - left) / 2;\n                if (potions[mid] >= target) {\n                    count = potions.length - mid; // Number of potions that can form a successful pair\n                    right = mid - 1; // Search in the left half for more successful potions\n                } else {\n                    left = mid + 1; // Search in the right half\n                }\n            }\n            successfulPairs[i] = count; // Store the count of successful pairs for the current spell\n        }\n        \n        return successfulPairs; // Return the array containing the count of successful pairs for each spell\n    }\n}\n","compare_result":"11111111111111111111111111111111111111111111111111111111","title_slug":"successful-pairs-of-spells-and-potions","has_notes":false,"flag_type":1}