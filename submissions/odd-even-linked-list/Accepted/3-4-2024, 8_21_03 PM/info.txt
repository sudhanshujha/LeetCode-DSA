{"id":1193672672,"question_id":328,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1709563863,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1193672672/","is_pending":"Not Pending","title":"Odd Even Linked List","memory":"43.7 MB","code":"/**\n * Definition for singly-linked list.\n * public class ListNode {\n * int val;\n * ListNode next;\n * ListNode() {}\n * ListNode(int val) { this.val = val; }\n * ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode oddEvenList(ListNode head) {\n        if (head == null || head.next == null) {\n            return head; // No need to rearrange if the list has 0 or 1 node\n        }\n\n        ListNode evenHead = head.next; // memoisation to use in end\n        ListNode odd = head; // declaring outside/memoisation & not in loop to use in end of loop\n\n        // We will traverse the list using odd & even as i & j and just rearrange \n        for (ListNode even = head.next; even != null && even.next != null; odd = odd.next, even = even.next) {\n            odd.next = odd.next.next; // Link odd node to the next odd node\n            even.next = even.next.next; // Link even node to the next even node\n        }\n\n        // Note: even will always be ahead of odd for all even or odd size both\n        // Link the last odd node to the first even node\n        odd.next = evenHead;\n\n        return head;\n    }\n}\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"odd-even-linked-list","has_notes":false,"flag_type":1}