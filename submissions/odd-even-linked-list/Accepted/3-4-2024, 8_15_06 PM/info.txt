{"id":1193667598,"question_id":328,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1709563506,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1193667598/","is_pending":"Not Pending","title":"Odd Even Linked List","memory":"44.6 MB","code":"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode oddEvenList(ListNode head) {\n        if (head == null || head.next == null) {\n            return head; // No need to rearrange if the list has 0 or 1 node\n        }\n        \n        ListNode evenHead = head.next;  //memoisation as we will need to coonnect it in end  \n        ListNode odd = head;    // declaring outside & not in loop as I will need to update odd next with even head after loop\n  \n        // We will traverse the list using odd & even as i & j and just rearrange next of odd & even nodes\n        for (ListNode even = evenHead; even != null && even.next != null; odd = odd.next, even = even.next) {\n            odd.next = even.next; // Link odd node to the next odd node\n            even.next = odd.next.next; // Link even node to the next even node\n        }\n\n        // Link the last odd node to the first even node \n        // Note: even will always be ahead of odd for even * odd size both & we need to update last odd\n        odd.next = evenHead;\n\n        return head;\n    }\n}\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"odd-even-linked-list","has_notes":false,"flag_type":1}