{"id":1193757134,"question_id":2236,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1709569237,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1193757134/","is_pending":"Not Pending","title":"Maximum Twin Sum of a Linked List","memory":"N/A","code":"class Solution {\n    public int pairSum(ListNode head) {\n        if (head == null) {\n            return 0;\n        }\n        if (head.next.next == null) {\n            return head.val+head.next.val;\n        }\n        int max = 0;\n        ListNode mid = findMiddle(head);\n        ListNode reversedMid = reverseList(mid.next); // Reverse the second half\n        \n        // Calculate pair sum while traversing both halves\n        while (reversedMid != null && head != null) {\n            max = Math.max(max, head.val + reversedMid.val);\n            head = head.next;\n            reversedMid = reversedMid.next;\n        }\n        \n        return max;\n    }\n\n    public ListNode reverseList(ListNode head) {\n        ListNode prev = null;\n        ListNode curr = head;\n        \n        while (curr != null) {\n            ListNode temp = curr.next;\n            curr.next = prev;\n            prev = curr;\n            curr = temp;\n        }\n        \n        return prev;\n    }\n\n    public ListNode findMiddle(ListNode head) {\n        ListNode slow = head;\n        ListNode fast = head;\n        ListNode prev = null; // To keep track of the node before slow\n\n        while (fast != null && fast.next != null) {\n            prev = slow;\n            slow = slow.next;\n            fast = fast.next.next;\n        }\n\n        if (prev != null) {\n            prev.next = null; // Separate the list at the middle node\n        }\n\n        return slow;\n    }\n}\n","compare_result":"1111101111111111110111111111111111111111111110","title_slug":"maximum-twin-sum-of-a-linked-list","has_notes":false,"flag_type":1}