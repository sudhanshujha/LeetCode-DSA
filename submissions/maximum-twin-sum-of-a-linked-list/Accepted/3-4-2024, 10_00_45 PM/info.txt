{"id":1193767364,"question_id":2236,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1709569845,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1193767364/","is_pending":"Not Pending","title":"Maximum Twin Sum of a Linked List","memory":"63.3 MB","code":"class Solution {\n    public int pairSum(ListNode head) {\n\n        //finding middle\n\n        ListNode slow=head;\n        ListNode fast=head;\n\n        while(fast!=null && fast.next!=null){\n\n            slow=slow.next;\n            fast=fast.next.next;\n        }\n\n        //reversing the node\n        ListNode prev=null;\n        ListNode curr=slow;\n\n        while(curr!=null){\n\n            ListNode temp=curr.next;\n            curr.next=prev;\n            prev=curr;\n            curr=temp;\n\n        }\n\n\n\n        // Checking maximum twin sum\n        int max = 0;\n\n        ListNode h1 = head;\n        ListNode h2 = prev; // Reversed second half\n\n        while (h1 != null && h2 != null) {\n            int twinSum = h1.val + h2.val;\n           // max = Math.max(max, twinSum);\n            if (twinSum > max) {\n                max = twinSum;\n            }\n\n            h1 = h1.next;\n            h2 = h2.next;\n        }\n\n        return max;\n        \n    }\n}\n","compare_result":"1111111111111111111111111111111111111111111111","title_slug":"maximum-twin-sum-of-a-linked-list","has_notes":false,"flag_type":1}