{"id":1201393500,"question_id":107,"lang":"java","lang_name":"Java","time":"1Â month","timestamp":1710236992,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1201393500/","is_pending":"Not Pending","title":"Binary Tree Level Order Traversal II","memory":"42.9 MB","code":"import java.util.*;\n\nclass Solution {\n    public List<List<Integer>> levelOrderBottom(TreeNode root) {\n        List<List<Integer>> result = new ArrayList<>();\n        if (root == null) return result;\n        \n        Queue<TreeNode> queue = new LinkedList<>();\n        queue.offer(root);\n        \n        while (!queue.isEmpty()) {\n            int levelSize = queue.size();\n            List<Integer> currentLevel = new ArrayList<>();\n            \n            for (int i = 0; i < levelSize; i++) {\n                TreeNode node = queue.poll();\n                currentLevel.add(node.val);\n                \n                if (node.left != null) queue.offer(node.left);\n                if (node.right != null) queue.offer(node.right);\n            }\n            \n            result.add(0, currentLevel); // Add the current level at the beginning of the result list\n        }\n        \n        return result;\n    }\n}\n","compare_result":"1111111111111111111111111111111111","title_slug":"binary-tree-level-order-traversal-ii","has_notes":false,"flag_type":1}