{"id":1181715972,"question_id":1116,"lang":"java","lang_name":"Java","time":"1 month, 3 weeks","timestamp":1708497527,"status":10,"status_display":"Accepted","runtime":"9 ms","url":"/submissions/detail/1181715972/","is_pending":"Not Pending","title":"Maximum Level Sum of a Binary Tree","memory":"47 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nimport java.util.*;\n\nclass Solution {\n    public int maxLevelSum(TreeNode root) {\n        if (root == null) return 0;\n        \n        int maxSum = Integer.MIN_VALUE;\n        int level = 0;\n        int maxLevel = 0;\n        \n        Queue<TreeNode> queue = new LinkedList<>();\n        queue.offer(root);\n        \n        while (!queue.isEmpty()) {\n            int size = queue.size();\n            int levelSum = 0; // Sum of nodes at current level\n            level++;\n            \n            for (int i = 0; i < size; i++) {\n                TreeNode node = queue.poll();\n                levelSum += node.val;\n                \n                if (node.left != null) {\n                    queue.offer(node.left);\n                }\n                if (node.right != null) {\n                    queue.offer(node.right);\n                }\n            }\n            \n            if (levelSum > maxSum) {\n                maxSum = levelSum;\n                maxLevel = level;\n            }\n        }\n        \n        return maxLevel;\n    }\n}\n","compare_result":"11111111111111111111111111111111111111111","title_slug":"maximum-level-sum-of-a-binary-tree","has_notes":false,"flag_type":1}