{"id":1188676035,"question_id":216,"lang":"java","lang_name":"Java","time":"1 month, 2 weeks","timestamp":1709123250,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1188676035/","is_pending":"Not Pending","title":"Combination Sum III","memory":"40.8 MB","code":"class Solution {\n    public List<List<Integer>> combinationSum3(int k, int n) {\n        // int a[] = {1, 2, 3, 4, 5, 6, 7, 8, 9};\n        List<Integer> a = new ArrayList<>();\n        for (int i = 1; i <= 9; i++) {\n            a.add(i);\n        }\n        List<List<Integer>> op = new ArrayList<>(); \n        List<Integer> ds = new ArrayList<>();\n        helper(0, n, k, a, ds, op);\n        return op;\n    }\n    // i for index, ds for subset\n    public static void helper(int i, int target, int k, List<Integer> a, List<Integer> ds, List<List<Integer>> op){\n        if(i == a.size() || target <= 0 || k <= 0){\n            if (target == 0 && k == 0) {\n                op.add(new ArrayList<>(ds));\n            }\n            return;\n        }\n\n        // Include the current element\n        ds.add(a.get(i));\n        helper(i + 1, target - a.get(i), k - 1, a, ds, op);\n        ds.remove(ds.size() - 1); // Backtrack\n        \n        // Exclude the current element\n        helper(i + 1, target, k, a, ds, op);\n    }\n}","compare_result":"111111111111111111","title_slug":"combination-sum-iii","has_notes":true,"flag_type":1}