{"id":1188774729,"question_id":216,"lang":"java","lang_name":"Java","time":"1 month, 2 weeks","timestamp":1709131394,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1188774729/","is_pending":"Not Pending","title":"Combination Sum III","memory":"41.2 MB","code":"import java.util.*;\n\nclass Solution {\n    public List<List<Integer>> combinationSum3(int k, int n) {\n        List<List<Integer>> result = new ArrayList<>();\n        List<List<List<Integer>>> dp = new ArrayList<>();\n        \n        // Initialize the dp array\n        for (int i = 0; i <= n; i++) {\n            dp.add(new ArrayList<>());  // \n        }\n        \n        dp.get(0).add(new ArrayList<>()); // Base case: 0 sum is achievable with an empty list\n        \n        // Iterate over all elements from 1 to 9\n        for (int i = 1; i <= 9; i++) {\n            // Iterate over all sums from n to i\n            for (int j = n; j >= i; j--) {\n                // Iterate over all combinations for current sum\n                for (List<Integer> combination : dp.get(j - i)) {\n                    if (combination.size() < k) { // Ensure combination size is less than k\n                        List<Integer> newCombination = new ArrayList<>(combination);\n                        newCombination.add(i);\n                        dp.get(j).add(newCombination);\n                    }\n                }\n            }\n        }\n        \n        return dp.get(n).stream().filter(list -> list.size() == k).toList();\n    }\n}\n","compare_result":"111111111111111111","title_slug":"combination-sum-iii","has_notes":false,"flag_type":1}