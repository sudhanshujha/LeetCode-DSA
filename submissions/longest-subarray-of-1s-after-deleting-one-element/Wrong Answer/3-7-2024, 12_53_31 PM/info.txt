{"id":1196487384,"question_id":1586,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1709796211,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1196487384/","is_pending":"Not Pending","title":"Longest Subarray of 1's After Deleting One Element","memory":"N/A","code":"class Solution {\n    public int longestSubarray(int[] nums) {\n        int n = nums.length;\n        int[] pre = new int[n];\n        int[] suff = new int[n];\n        \n        boolean containsZero = Arrays.stream(nums).anyMatch(x -> x == 0);\n        if(!containsZero) \n            return n-1;\n\n        int count = 0;\n        for (int i = 0; i < n; i++) \n        {\n            if (nums[i] == 1) \n            {\n                count+=1;\n                pre[i] = count;\n            } \n            else \n            {   \n                count = 0;\n                pre[i] = 0;\n            }\n        } \n        \n        count = 0;\n        for (int i = n - 1; i >= 0; i--) {\n            if (nums[i] == 1) {\n                count++;\n                suff[i] = count;\n            } else {\n                count = 0;\n                suff[i] = 0;\n            }\n        } \n        \n        int max = 0;\n        for (int i = 1; i <n-1; i++) {\n            if(nums[i]==0){\n                int temp = pre[i-1] + suff[i + 1];\n                max = Math.max(temp, max);\n            }\n        }  \n        \n        return max;\n    }\n}\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111110111111011","title_slug":"longest-subarray-of-1s-after-deleting-one-element","has_notes":false,"flag_type":1}