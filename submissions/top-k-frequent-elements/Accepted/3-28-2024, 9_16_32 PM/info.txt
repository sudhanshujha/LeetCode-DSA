{"id":1216499843,"question_id":347,"lang":"java","lang_name":"Java","time":"2 weeks, 4 days","timestamp":1711640792,"status":10,"status_display":"Accepted","runtime":"13 ms","url":"/submissions/detail/1216499843/","is_pending":"Not Pending","title":"Top K Frequent Elements","memory":"48.4 MB","code":"class Solution {\n    public int[] topKFrequent(int[] nums, int k) {\n        // Step 1: Count the frequency of each number\n        Map<Integer, Integer> frequencyMap = new HashMap<>();\n        for (int num : nums) {\n            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);\n        }\n\n        // Step 2: Create a min-heap to store top k frequent elements\n        PriorityQueue<Map.Entry<Integer, Integer>> minHeap = new PriorityQueue<>(\n            (entry1, entry2) -> entry1.getValue() - entry2.getValue()\n        );\n\n        // Step 3: Iterate through the frequency map and maintain the min-heap with top k frequent elements\n        for (Map.Entry<Integer, Integer> entry : frequencyMap.entrySet()) {\n            minHeap.offer(entry);\n            if (minHeap.size() > k) {\n                minHeap.poll(); // Remove the least frequent element if heap size exceeds k\n            }\n        }\n\n        // Step 4: Extract top k frequent elements from the min-heap\n        int[] result = new int[k];\n        int index = k - 1; // Start filling the result array from the end\n        while (!minHeap.isEmpty()) {\n            result[index--] = minHeap.poll().getKey();\n        }\n\n        return result;\n    }\n}","compare_result":"111111111111111111111","title_slug":"top-k-frequent-elements","has_notes":false,"flag_type":1}