{"id":1219233402,"question_id":92,"lang":"java","lang_name":"Java","time":"2 weeks, 1 day","timestamp":1711894156,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1219233402/","is_pending":"Not Pending","title":"Reverse Linked List II","memory":"40.5 MB","code":"class Solution {\n    public ListNode reverseBetween(ListNode head, int left, int right) {\n        if (head == null || left == right) {\n            return head;\n        }\n\n        ListNode dummy = new ListNode(-1); // Dummy node to handle case when left = 1\n        dummy.next = head;\n        ListNode prev = dummy; // Pointer to the node before the sublist to be reversed\n\n        // Move prev to the node before the sublist to be reversed\n        for (int i = 1; i < left; i++) {\n            prev = prev.next;\n        }\n\n        ListNode curr = prev.next; // Pointer to the first node of the sublist to be reversed\n\n        // Reverse the sublist between left and right\n        for (int i = left; i < right; i++) {\n            ListNode nextNode = curr.next;\n            curr.next = nextNode.next; // Adjust the next pointer of curr\n            nextNode.next = prev.next; // Insert nextNode before prev.next\n            prev.next = nextNode; // Update prev.next to nextNode\n        }\n\n        return dummy.next; // Return the head of the modified list\n    }\n}\n","compare_result":"11111111111111111111111111111111111111111111","title_slug":"reverse-linked-list-ii","has_notes":true,"flag_type":1}