{"id":1190749193,"question_id":443,"lang":"java","lang_name":"Java","time":"1 month, 2 weeks","timestamp":1709309491,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1190749193/","is_pending":"Not Pending","title":"String Compression","memory":"43.5 MB","code":"class Solution {\n    public int compress(char[] chars) {\n        int n = chars.length;\n        StringBuilder s = new StringBuilder();\n        //  If the group's length is 1\n        if(n==1) return 1;\n\n        int i=0, freq;   // 2 pointer 1 iterates other keep updating the freq\n        while (i<n) {\n            freq = 1;\n            s.append(chars[i]);\n            while (i < n-1 && chars[i] == chars[i + 1]) {\n                i++;\n                freq++;\n            }\n            // check if freq is converted into string\n            \n            if(freq>1){\n                s.append(freq);\n            }\n            \n            //  group lengths that are 10 or 100 or longer will be split into multiple characters in chars \n            // but moving from stringbuilder to char array during iteration will take care   \n            \n            i++; // Increment i to move to the next character\n        }\n        // copy s to chars when you face any number then enter them one by one in chars array\n        for (int j = 0; j < s.length(); j++) {\n            chars[j] = s.charAt(j);\n        }\n        return s.length();\n    }             \n}\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"string-compression","has_notes":false,"flag_type":1}