{"id":1190751150,"question_id":443,"lang":"java","lang_name":"Java","time":"1 month, 2 weeks","timestamp":1709309635,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1190751150/","is_pending":"Not Pending","title":"String Compression","memory":"44 MB","code":"class Solution {\n    public int compress(char[] chars) {\n        int n = chars.length;\n        if (n == 0) return 0;\n        \n        int writeIndex = 0;\n        int anchor = 0;\n        \n        for (int readIndex = 0; readIndex < n; readIndex++) {\n            if (readIndex == n - 1 || chars[readIndex] != chars[readIndex + 1]) {\n                chars[writeIndex++] = chars[anchor];\n                if (readIndex > anchor) {\n                    for (char c : (\"\" + (readIndex - anchor + 1)).toCharArray()) {\n                        chars[writeIndex++] = c;\n                    }\n                }\n                anchor = readIndex + 1;\n            }\n        }\n        \n        return writeIndex;\n    }\n}\n// Instead of using a StringBuilder, this approach directly modifies the input char array chars in place.\n// It uses two pointers: readIndex to iterate over the characters and writeIndex to track the position where the compressed characters should be written back.\n// anchor is used to mark the beginning of each group of identical characters.","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"string-compression","has_notes":false,"flag_type":1}