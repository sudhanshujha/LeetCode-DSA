{"id":1182848932,"question_id":20,"lang":"java","lang_name":"Java","time":"1 month, 3 weeks","timestamp":1708591532,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1182848932/","is_pending":"Not Pending","title":"Valid Parentheses","memory":"41.2 MB","code":"import java.util.Stack;\n\nclass Solution {\n    public boolean isValid(String s) {\n        Stack<Character> stack = new Stack<>();\n        \n        // Convert string into char array\n        char[] chars = s.toCharArray();\n        \n        // Iterate through each character in the string\n        for (char c : chars) {\n            // If the character is an opening bracket, push it onto the stack\n            if (c == '(' || c == '[' || c == '{') {\n                stack.push(c);\n            } else {\n                // If the character is a closing bracket, check if it matches the top of the stack\n                if (stack.isEmpty()) {\n                    return false; // More closing brackets than opening brackets\n                }\n                char top = stack.pop();\n                if ((c == ')' && top != '(') || (c == ']' && top != '[') || (c == '}' && top != '{')) {\n                    return false; // Mismatched brackets\n                }\n            }\n        }\n        \n        // After iterating through the string, if the stack is empty, all brackets are matched\n        return stack.isEmpty();\n    }\n}\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"valid-parentheses","has_notes":false,"flag_type":1}