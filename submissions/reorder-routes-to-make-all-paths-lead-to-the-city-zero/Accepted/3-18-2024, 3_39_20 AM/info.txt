{"id":1206699471,"question_id":1576,"lang":"java","lang_name":"Java","time":"4 weeks, 1 day","timestamp":1710713360,"status":10,"status_display":"Accepted","runtime":"34 ms","url":"/submissions/detail/1206699471/","is_pending":"Not Pending","title":"Reorder Routes to Make All Paths Lead to the City Zero","memory":"73.4 MB","code":"class Solution {\n    int dfs(List<List<Integer>> al, boolean[] visited, int from) {\n        int change = 0;\n        visited[from] = true;\n        for (var to : al.get(from))\n            if (!visited[Math.abs(to)])\n                change += dfs(al, visited, Math.abs(to)) + (to > 0 ? 1 : 0);\n        return change;   \n    }\n    public int minReorder(int n, int[][] connections) {\n        List<List<Integer>> al = new ArrayList<>();\n        for(int i = 0; i < n; ++i) \n            al.add(new ArrayList<>());\n        for (var c : connections) {\n            al.get(c[0]).add(c[1]);\n            al.get(c[1]).add(-c[0]);\n        }\n        return dfs(al, new boolean[n], 0);\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"reorder-routes-to-make-all-paths-lead-to-the-city-zero","has_notes":false,"flag_type":1}