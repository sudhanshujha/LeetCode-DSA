{"id":1201396086,"question_id":17,"lang":"java","lang_name":"Java","time":"1Â month","timestamp":1710237233,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1201396086/","is_pending":"Not Pending","title":"Letter Combinations of a Phone Number","memory":"41.7 MB","code":"import java.util.*;\n\nclass Solution {\n    public List<String> letterCombinations(String digits) {\n        List<String> result = new ArrayList<>();\n        if (digits == null || digits.length() == 0) {\n            return result;\n        }\n        Map<Character, String> map = new HashMap<>();\n        map.put('2', \"abc\");\n        map.put('3', \"def\");\n        map.put('4', \"ghi\");\n        map.put('5', \"jkl\");\n        map.put('6', \"mno\");\n        map.put('7', \"pqrs\");\n        map.put('8', \"tuv\");\n        map.put('9', \"wxyz\");\n        backtrack(result, digits, 0, new StringBuilder(), map);\n        return result;\n    }\n    \n    private void backtrack(List<String> result, String digits, int index, StringBuilder current, Map<Character, String> map) {\n        if (index == digits.length()) {\n            result.add(current.toString());\n            return;\n        }\n        char digit = digits.charAt(index);\n        String letters = map.get(digit);\n        for (char letter : letters.toCharArray()) {\n            current.append(letter);\n            backtrack(result, digits, index + 1, current, map);\n            current.deleteCharAt(current.length() - 1);\n        }\n    }\n}\n","compare_result":"1111111111111111111111111","title_slug":"letter-combinations-of-a-phone-number","has_notes":false,"flag_type":1}