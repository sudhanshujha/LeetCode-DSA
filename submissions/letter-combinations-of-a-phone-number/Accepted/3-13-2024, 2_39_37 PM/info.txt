{"id":1202374848,"question_id":17,"lang":"java","lang_name":"Java","time":"1Â month","timestamp":1710320977,"status":10,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/1202374848/","is_pending":"Not Pending","title":"Letter Combinations of a Phone Number","memory":"41.6 MB","code":"//iterative\nclass Solution {\n    public List<String> letterCombinations(String digits) {\n        List<String> result = new ArrayList<>();\n        if (digits == null || digits.length() == 0) {\n            return result;\n        }\n        \n        // Mapping of digits to letters\n        String[] mappings = {\n            \"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqrs\", \"tuv\", \"wxyz\"\n        };\n        \n        Queue<String> queue = new LinkedList<>();\n        queue.offer(\"\");\n        \n        for (char digit : digits.toCharArray()) {\n            int size = queue.size();\n            String letters = mappings[digit - '2'];\n            for (int i = 0; i < size; i++) {\n                String prefix = queue.poll();\n                for (char letter : letters.toCharArray()) {\n                    queue.offer(prefix + letter);\n                }\n            }\n        }\n        \n        while (!queue.isEmpty()) {\n            result.add(queue.poll());\n        }\n        \n        return result;\n    }\n}\n","compare_result":"1111111111111111111111111","title_slug":"letter-combinations-of-a-phone-number","has_notes":false,"flag_type":1}