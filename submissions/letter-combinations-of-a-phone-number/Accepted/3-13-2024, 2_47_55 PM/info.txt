{"id":1202380507,"question_id":17,"lang":"java","lang_name":"Java","time":"1Â month","timestamp":1710321475,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1202380507/","is_pending":"Not Pending","title":"Letter Combinations of a Phone Number","memory":"41.6 MB","code":"import java.util.*;\n\nclass Solution {\n    public List<String> letterCombinations(String d) {\n        List<String> res = new ArrayList<>();\n        if (d == null || d.length() == 0) {\n            return res;\n        }\n        Map<Character, String> map = new HashMap<>();\n        map.put('2', \"abc\");\n        map.put('3', \"def\");\n        map.put('4', \"ghi\");\n        map.put('5', \"jkl\");\n        map.put('6', \"mno\");\n        map.put('7', \"pqrs\");\n        map.put('8', \"tuv\");\n        map.put('9', \"wxyz\");\n        helper(res, d, 0, new StringBuilder(), map);\n        return res;\n    }\n    \n    private void helper(List<String> res, String d, int i, StringBuilder curr, Map<Character, String> map) {\n        // res = result, i = index, curr = currrent, d=digits string\n        if (i == d.length()) {\n            res.add(curr.toString());\n            return;\n        }\n        char digit = d.charAt(i);\n        String letters = map.get(digit);\n        for (char letter : letters.toCharArray()) {\n            curr.append(letter);\n            helper(res, d, i + 1, curr, map);\n            curr.deleteCharAt(curr.length() - 1);\n        }\n    }\n}\n","compare_result":"1111111111111111111111111","title_slug":"letter-combinations-of-a-phone-number","has_notes":false,"flag_type":1}