{"id":1188553770,"question_id":40,"lang":"java","lang_name":"Java","time":"1 month, 2 weeks","timestamp":1709111308,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1188553770/","is_pending":"Not Pending","title":"Combination Sum II","memory":"43 MB","code":"import java.util.*;\n\nclass Solution {\n    public List<List<Integer>> combinationSum2(int[] candidates, int target) {\n        Arrays.sort(candidates); // Sort the candidates to handle duplicates and enable pruning\n        List<List<Integer>> result = new ArrayList<>();\n        List<Integer> combination = new ArrayList<>();\n        combinationSumHelper(candidates, target, 0, combination, result);\n        return result;\n    }\n\n    private void combinationSumHelper(int[] candidates, int target, int startIndex, List<Integer> combination, List<List<Integer>> result) {\n        if (target == 0) {\n            result.add(new ArrayList<>(combination));\n            return;\n        }\n\n        for (int i = startIndex; i < candidates.length && candidates[i] <= target; i++) {\n            if (i == startIndex || candidates[i] != candidates[i - 1]) { // Skip duplicates\n                combination.add(candidates[i]);\n                combinationSumHelper(candidates, target - candidates[i], i + 1, combination, result); // Use i + 1 to avoid reuse of same element\n                combination.remove(combination.size() - 1); // Backtrack\n            }\n        }\n    }\n}\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"combination-sum-ii","has_notes":false,"flag_type":1}