{"id":1188552378,"question_id":40,"lang":"java","lang_name":"Java","time":"1 month, 2 weeks","timestamp":1709111181,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1188552378/","is_pending":"Not Pending","title":"Combination Sum II","memory":"42.9 MB","code":"class Solution {\n    public List<List<Integer>> combinationSum2(int[] candidates, int target) {\n        List<List<Integer>> op = new ArrayList<>();\n        List<Integer> ds = new ArrayList<>();\n        Arrays.sort(candidates); // Sort candidates to handle duplicates\n        helper(0, target, candidates, ds, op);\n        return op;\n    }\n    \n    public static void helper(int i, int target, int[] arr, List<Integer> ds, List<List<Integer>> op) {\n        if (i == arr.length) {\n            if (target == 0) {\n                op.add(new ArrayList<>(ds));\n            }\n            return;\n        }\n        \n        // Include the current element if it doesn't exceed the target\n        if (arr[i] <= target) {\n            ds.add(arr[i]);\n            helper(i + 1, target - arr[i], arr, ds, op); // Recursive call after including the current element\n            ds.remove(ds.size() - 1); // Backtrack: remove the last element to explore other possibilities\n        }\n        \n        // Skip duplicates\n        while (i + 1 < arr.length && arr[i] == arr[i + 1]) {\n            i++;\n        }\n        \n        // Recursive call without including the current element\n        helper(i + 1, target, arr, ds, op);\n    }\n}\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"combination-sum-ii","has_notes":false,"flag_type":1}