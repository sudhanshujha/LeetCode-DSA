{"id":1214573494,"question_id":41,"lang":"java","lang_name":"Java","time":"2 weeks, 6 days","timestamp":1711468755,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1214573494/","is_pending":"Not Pending","title":"First Missing Positive","memory":"55.1 MB","code":"class Solution {\n    public int firstMissingPositive(int[] nums) {\n        int n = nums.length;\n        \n        // Step 1: Mark all non-positive integers and integers greater than n as irrelevant\n        for (int i = 0; i < n; i++) {\n            if (nums[i] <= 0 || nums[i] > n) {\n                nums[i] = n + 1; // Marking them as irrelevant\n            }\n        }\n        \n        // Step 2: Mark indices corresponding to present positive integers\n        for (int i = 0; i < n; i++) {\n            int num = Math.abs(nums[i]);\n            if (num <= n) {\n                nums[num - 1] = -Math.abs(nums[num - 1]); // Marking the index as present\n            }\n        }\n        \n        // Step 3: The first positive index (+1) that is not marked is the answer\n        for (int i = 0; i < n; i++) {\n            if (nums[i] > 0) {\n                return i + 1;\n            }\n        }\n        \n        // Step 4: If all indices are marked, then the answer is n + 1\n        return n + 1;\n    }\n}\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"first-missing-positive","has_notes":false,"flag_type":1}