{"id":1206650373,"question_id":1036,"lang":"java","lang_name":"Java","time":"4 weeks, 1 day","timestamp":1710707714,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1206650373/","is_pending":"Not Pending","title":"Rotting Oranges","memory":"42.2 MB","code":"class Solution {\n    public int orangesRotting(int[][] grid) {\n        int[][] dirs = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};\n        Queue<int[]> queue = new LinkedList<>();\n        int freshOranges = 0, minutes = 0;\n\n        // Enqueue all rotten oranges and count fresh oranges\n        for (int i = 0; i < grid.length; i++) {\n            for (int j = 0; j < grid[0].length; j++) {\n                if (grid[i][j] == 1) freshOranges++;\n                else if (grid[i][j] == 2) queue.offer(new int[]{i, j});\n            }\n        }\n\n        // BFS to rot neighboring oranges\n        while (!queue.isEmpty() && freshOranges > 0) {\n            int size = queue.size();\n            for (int i = 0; i < size; i++) {\n                int[] curr = queue.poll();\n                for (int[] dir : dirs) {\n                    int x = curr[0] + dir[0];\n                    int y = curr[1] + dir[1];\n                    if (x >= 0 && x < grid.length && y >= 0 && y < grid[0].length && grid[x][y] == 1) {\n                        grid[x][y] = 2;\n                        freshOranges--;\n                        queue.offer(new int[]{x, y});\n                    }\n                }\n            }\n            minutes++;\n        }\n\n        return freshOranges == 0 ? minutes : -1;\n    }\n}\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"rotting-oranges","has_notes":false,"flag_type":1}