{"id":1206659936,"question_id":1036,"lang":"java","lang_name":"Java","time":"4 weeks, 1 day","timestamp":1710708717,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1206659936/","is_pending":"Not Pending","title":"Rotting Oranges","memory":"42.6 MB","code":"class Solution {\n    public int orangesRotting(int[][] grid) {\n        if(grid == null || grid.length == 0) return 0;\n        int rows = grid.length;\n        int cols = grid[0].length;\n        Queue<int[]> queue = new LinkedList<>();\n        int count_fresh = 0;\n        //Put the position of all rotten oranges in queue\n        //count the number of fresh oranges\n        for(int i = 0 ; i < rows ; i++) {\n            for(int j = 0 ; j < cols ; j++) {\n                if(grid[i][j] == 2) {\n                    queue.offer(new int[]{i , j});\n                }\n                else if(grid[i][j] == 1) {\n                    count_fresh++;\n                }\n            }\n        }\n        //if count of fresh oranges is zero --> return 0 \n        if(count_fresh == 0) return 0;\n        int count = 0;\n        int[][] dirs = {{1,0},{-1,0},{0,1},{0,-1}};\n        //bfs starting from initially rotten oranges\n        while(!queue.isEmpty()) {\n            ++count;\n            int size = queue.size();\n            for(int i = 0 ; i < size ; i++) {\n                int[] point = queue.poll();\n                for(int dir[] : dirs) {\n                    int x = point[0] + dir[0];\n                    int y = point[1] + dir[1];\n                    //if x or y is out of bound\n                    //or the orange at (x , y) is already rotten\n                    //or the cell at (x , y) is empty\n                        //we do nothing\n                    if(x < 0 || y < 0 || x >= rows || y >= cols || grid[x][y] == 0 || grid[x][y] == 2) continue;\n                    //mark the orange at (x , y) as rotten\n                    grid[x][y] = 2;\n                    //put the new rotten orange at (x , y) in queue\n                    queue.offer(new int[]{x , y});\n                    //decrease the count of fresh oranges by 1\n                    count_fresh--;\n                }\n            }\n        }\n        return count_fresh == 0 ? count-1 : -1;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"rotting-oranges","has_notes":false,"flag_type":1}