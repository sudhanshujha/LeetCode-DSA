{"id":1227602357,"question_id":76,"lang":"java","lang_name":"Java","time":"6 days, 21 hours","timestamp":1712664657,"status":10,"status_display":"Accepted","runtime":"21 ms","url":"/submissions/detail/1227602357/","is_pending":"Not Pending","title":"Minimum Window Substring","memory":"45.1 MB","code":"import java.util.HashMap;\nimport java.util.Map;\n\nclass Solution {\n    public String minWindow(String s, String t) {\n        // Step 1: Create a frequency map of characters in string t\n        Map<Character, Integer> targetFreqMap = new HashMap<>();\n        for (char c : t.toCharArray()) {\n            targetFreqMap.put(c, targetFreqMap.getOrDefault(c, 0) + 1);\n        }\n\n        // Step 2: Initialize variables\n        int left = 0, right = 0, minLeft = 0, minLen = Integer.MAX_VALUE;\n        int requiredChars = targetFreqMap.size();\n        int formedChars = 0;\n        Map<Character, Integer> windowFreqMap = new HashMap<>();\n\n        // Step 3: Iterate through string s using two pointers\n        while (right < s.length()) {\n            char c = s.charAt(right);\n            windowFreqMap.put(c, windowFreqMap.getOrDefault(c, 0) + 1);\n            if (targetFreqMap.containsKey(c) && windowFreqMap.get(c).intValue() == targetFreqMap.get(c).intValue()) {\n                formedChars++;\n            }\n\n            // Step 4: Shrink the window\n            while (left <= right && formedChars == requiredChars) {\n                char leftChar = s.charAt(left);\n                int windowLen = right - left + 1;\n                if (windowLen < minLen) {\n                    minLeft = left;\n                    minLen = windowLen;\n                }\n\n                windowFreqMap.put(leftChar, windowFreqMap.get(leftChar) - 1);\n                if (targetFreqMap.containsKey(leftChar) && windowFreqMap.get(leftChar) < targetFreqMap.get(leftChar)) {\n                    formedChars--;\n                }\n                left++;\n            }\n            right++;\n        }\n\n        return minLen == Integer.MAX_VALUE ? \"\" : s.substring(minLeft, minLeft + minLen);\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-window-substring","has_notes":false,"flag_type":1}