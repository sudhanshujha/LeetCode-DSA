{"id":1225718465,"question_id":79,"lang":"java","lang_name":"Java","time":"1 week, 1 day","timestamp":1712487113,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1225718465/","is_pending":"Not Pending","title":"Word Search","memory":"N/A","code":"import java.util.*;\n\nclass Solution {\n    public boolean exist(char[][] board, String word) {\n        // Step 1: Put all characters from the word into a set\n        Set<Character> charSet = new HashSet<>();\n        for (char c : word.toCharArray()) {\n            charSet.add(c);\n        }\n\n        // Step 2: Iterate through the matrix and fill a hashmap with row and column of characters\n        HashMap<Character, List<int[]>> charMap = new HashMap<>();\n        for (int i = 0; i < board.length; i++) {\n            for (int j = 0; j < board[0].length; j++) {\n                if (charSet.contains(board[i][j])) {\n                    charMap.putIfAbsent(board[i][j], new ArrayList<>());\n                    charMap.get(board[i][j]).add(new int[]{i, j});\n                }\n            }\n        }\n\n        // Step 3: Perform DFS search to find the word\n        return dfs(board, word, charMap, new HashSet<>(), 0, -1, -1);\n    }\n\n    private boolean dfs(char[][] board, String word, HashMap<Character, List<int[]>> charMap, Set<String> visited, int index, int row, int col) {\n        if (index == word.length()) {\n            return true; // Found the entire word\n        }\n\n        char currentChar = word.charAt(index);\n        if (!charMap.containsKey(currentChar)) {\n            return false; // Current character not found in the matrix\n        }\n\n        for (int[] pos : charMap.get(currentChar)) {\n            int newRow = pos[0];\n            int newCol = pos[1];\n            if (!visited.contains(newRow + \",\" + newCol) && (row == -1 || isValidAdjacent(row, col, newRow, newCol))) {\n                visited.add(newRow + \",\" + newCol);\n                if (dfs(board, word, charMap, visited, index + 1, newRow, newCol)) {\n                    return true;\n                }\n                visited.remove(newRow + \",\" + newCol);\n            }\n        }\n\n        return false;\n    }\n\n    private boolean isValidAdjacent(int row1, int col1, int row2, int col2) {\n        return Math.abs(row1 - row2) + Math.abs(col1 - col2) == 1;\n    }\n}\n","compare_result":"111111111111111111111111111111111111111111111100000000000000000000000000000000000000000","title_slug":"word-search","has_notes":false,"flag_type":1}