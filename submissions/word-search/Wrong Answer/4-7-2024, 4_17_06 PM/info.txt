{"id":1225715416,"question_id":79,"lang":"java","lang_name":"Java","time":"1 week, 1 day","timestamp":1712486826,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1225715416/","is_pending":"Not Pending","title":"Word Search","memory":"N/A","code":"import java.util.HashMap;\n\nclass Solution {\n    public boolean exist(char[][] board, String word) {\n        // Edge case: empty word\n        if (word == null || word.length() == 0)\n            return false;\n\n        // Create a HashMap to store the coordinates of each character\n        HashMap<Character, List<int[]>> charMap = new HashMap<>();\n\n        // Traverse the board and populate the HashMap\n        for (int i = 0; i < board.length; i++) {\n            for (int j = 0; j < board[0].length; j++) {\n                char c = board[i][j];\n                if (!charMap.containsKey(c))\n                    charMap.put(c, new ArrayList<>());\n                charMap.get(c).add(new int[]{i, j});\n            }\n        }\n\n        // Starting with the first character of the word, recursively search for the word\n        return searchWord(board, word, 0, charMap, new boolean[board.length][board[0].length]);\n    }\n\n    // Recursive method to search for the word on the board\n    private boolean searchWord(char[][] board, String word, int index, HashMap<Character, List<int[]>> charMap, boolean[][] visited) {\n        if (index == word.length())\n            return true;\n\n        char c = word.charAt(index);\n        if (!charMap.containsKey(c))\n            return false;\n\n        for (int[] pos : charMap.get(c)) {\n            int row = pos[0];\n            int col = pos[1];\n            if (!visited[row][col]) {\n                visited[row][col] = true;\n                if (isValid(board, row, col) && board[row][col] == c &&\n                        searchWord(board, word, index + 1, charMap, visited))\n                    return true;\n                visited[row][col] = false;\n            }\n        }\n\n        return false;\n    }\n\n    // Helper method to check if a position is valid on the board\n    private boolean isValid(char[][] board, int row, int col) {\n        return row >= 0 && row < board.length && col >= 0 && col < board[0].length;\n    }\n}\n","compare_result":"111111111111111111111011111111100000000000000000000000000000000000000000000000000000000","title_slug":"word-search","has_notes":false,"flag_type":1}