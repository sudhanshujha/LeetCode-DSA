{"id":1225719499,"question_id":79,"lang":"java","lang_name":"Java","time":"1 week, 1 day","timestamp":1712487211,"status":10,"status_display":"Accepted","runtime":"140 ms","url":"/submissions/detail/1225719499/","is_pending":"Not Pending","title":"Word Search","memory":"41.3 MB","code":"class Solution {\n    public boolean exist(char[][] board, String word) {\n        for (int i = 0; i < board.length; i++) {\n            for (int j = 0; j < board[0].length; j++) {\n                if (dfs(board, i, j, word, 0)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    private boolean dfs(char[][] board, int i, int j, String word, int k) {\n        if (k == word.length()) {\n            return true; // Word found\n        }\n        if (i < 0 || j < 0 || i == board.length || j == board[0].length || board[i][j] != word.charAt(k)) {\n            return false; // Out of bounds or mismatch\n        }\n        char temp = board[i][j];\n        board[i][j] = ' '; // Mark current cell as visited\n        boolean found = dfs(board, i + 1, j, word, k + 1) ||\n                        dfs(board, i - 1, j, word, k + 1) ||\n                        dfs(board, i, j + 1, word, k + 1) ||\n                        dfs(board, i, j - 1, word, k + 1);\n        board[i][j] = temp; // Restore the original value\n        return found;\n    }\n}\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"word-search","has_notes":false,"flag_type":1}