{"id":1201391898,"question_id":450,"lang":"java","lang_name":"Java","time":"1Â month","timestamp":1710236839,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1201391898/","is_pending":"Not Pending","title":"Delete Node in a BST","memory":"45.5 MB","code":"class Solution {\n    public TreeNode deleteNode(TreeNode root, int key) {\n        return delete(root, key);\n    }\n    \n    private TreeNode delete(TreeNode root, int key) {\n        if (root == null) return null; // Base case\n        \n        // If key is found\n        if (root.val == key) {\n            // Case 1: If the node to be deleted has no children\n            if (root.left == null && root.right == null) {\n                return null; // Simply delete the node\n            }\n            // Case 2: If the node to be deleted has only one child\n            else if (root.left == null) {\n                return root.right; // Replace the node with its right child\n            } else if (root.right == null) {\n                return root.left; // Replace the node with its left child\n            }\n            // Case 3: If the node to be deleted has both left and right children\n            else {\n                // Find the inorder successor (smallest node in the right subtree)\n                TreeNode successor = findMin(root.right);\n                // Replace the node's value with the inorder successor\n                root.val = successor.val;\n                // Recursively delete the inorder successor node from the right subtree\n                root.right = delete(root.right, successor.val);\n            }\n        }\n        // If key is less than the current node's value, go left\n        else if (key < root.val) {\n            root.left = delete(root.left, key);\n        }\n        // If key is greater than the current node's value, go right\n        else {\n            root.right = delete(root.right, key);\n        }\n        \n        return root;\n    }\n    \n    // Helper function to find the minimum node in a subtree\n    private TreeNode findMin(TreeNode node) {\n        while (node.left != null) {\n            node = node.left;\n        }\n        return node;\n    }\n}\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"delete-node-in-a-bst","has_notes":true,"flag_type":1}