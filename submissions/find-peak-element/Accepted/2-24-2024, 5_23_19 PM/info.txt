{"id":1184773037,"question_id":162,"lang":"java","lang_name":"Java","time":"1 month, 3 weeks","timestamp":1708775599,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1184773037/","is_pending":"Not Pending","title":"Find Peak Element","memory":"42.6 MB","code":"class Solution {\n    public int findPeakElement(int[] nums) {\n        int low = 0;\n        int high = nums.length-1;\n        int mid;\n        if(nums.length==1) return 0;\n        // if(nums.length==2) return nums[0]>nums[1]? 0:1;\n            if(nums[0]>nums[1])   return 0;\n            if(nums[nums.length-1]>nums[nums.length-2])   return nums.length-1;\n        low++; high--;\n        while(low<=high){\n            mid = low + (high-low)/2;\n            \n            // base condition is if it is a peak element\n            if(nums[mid-1]<nums[mid] && nums[mid]>nums[mid+1])\n                return mid;\n            //else move to right to find peak if it is like 3 in 1,3,5\n            else if(nums[mid-1]<nums[mid] && nums[mid]<nums[mid+1])\n                low = mid+1;\n            else\n                high = mid-1;\n        }\n        return -1;\n        \n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-peak-element","has_notes":false,"flag_type":1}