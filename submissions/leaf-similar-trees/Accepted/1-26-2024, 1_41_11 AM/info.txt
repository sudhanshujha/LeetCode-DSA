{"id":1156813213,"question_id":904,"lang":"java","lang_name":"Java","time":"2 months, 3 weeks","timestamp":1706213471,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1156813213/","is_pending":"Not Pending","title":"Leaf-Similar Trees","memory":"41.6 MB","code":"public class Solution {\n    public boolean leafSimilar(TreeNode root1, TreeNode root2) {\n        List<Integer> list1 = new ArrayList<>();\n        List<Integer> list2 = new ArrayList<>();\n        \n        helper(list1, root1);\n        helper(list2, root2);\n\n        return list1.equals(list2);\n    }\n    private void helper(List<Integer>list, TreeNode root)\n    {\n        if(root == null)\n            return;\n        if(root.left == null && root.right==null)\n        {\n            list.add(root.val);\n            return;\n        }\n        else\n        {\n            helper(list, root.left);\n            helper(list, root.right);\n        }\n    }\n    // public Integer[] inOrder(TreeNode node) {\n    //     List<Integer> arr = new ArrayList<>();\n    //     if (node == null)\n    //         return arr.toArray(new Integer[0]); // Convert ArrayList to Integer[] using toArray\n    //     if ((node.left == null) && (node.right == null)) {\n    //         arr.add(node.val);\n    //     }\n    //     arr.addAll(Arrays.asList(inOrder(node.left)));\n    //     arr.addAll(Arrays.asList(inOrder(node.right)));\n    //     return arr.toArray(new Integer[0]); // Convert ArrayList to Integer[] using toArray\n    // }\n    }","compare_result":"1111111111111111111111111111111111111111111111","title_slug":"leaf-similar-trees","has_notes":false,"flag_type":1}