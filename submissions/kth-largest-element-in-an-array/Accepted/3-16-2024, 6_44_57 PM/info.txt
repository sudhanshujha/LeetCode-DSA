{"id":1205254856,"question_id":215,"lang":"cpp","lang_name":"C++","time":"1Â month","timestamp":1710594897,"status":10,"status_display":"Accepted","runtime":"91 ms","url":"/submissions/detail/1205254856/","is_pending":"Not Pending","title":"Kth Largest Element in an Array","memory":"57.7 MB","code":"class Solution {\npublic:\n    //these functions helps in heapifying the array\n\nint parent(int i) {return (i-1)/2; }\nint leftchild(int i) {return 2*i+1;}\nint rightchild(int i) {return 2*i+2; }\n\nvoid shiftdown(vector<int>&nums, int i,int size){\n    //all these l,r,i,curr are indexes\n    int l = leftchild(i) , r = rightchild(i), curr = i;\n    if(l<=size && nums[curr] < nums[l]) curr = l;\n    if(r<=size and nums[r] > nums[curr]) curr = r;\n    if(curr != i){\n        //this means that one of the child has greater value, so we have to shiftdown the current node\n        swap(nums[curr],nums[i]);\n        shiftdown(nums,curr,size); // now shiftdown further\n    }\n}\nint findKthLargest(vector<int>& nums, int k) {\n    // build a heap and then extractmax() k times\n    // building heap takes approx O(n) time,\n    // so overall compexity will be O(klogn) which is pretty fast\n    \n    int n = nums.size();\n    //first of all, heapify the array\n    for(int i=n/2;i>=0;i--){\n        shiftdown(nums,i,nums.size()-1); //size meaning last index\n    }\n    // now run loop k-1 times to find kth largest element\n    int size = nums.size()-1; //size is the last index\n    for(int i=0;i<k-1;i++){\n        swap(nums[0],nums[size]);\n        size--;\n        shiftdown(nums,0,size); \n    }\n    return nums[0];\n}\n};","compare_result":"11111111111111111111111111111111111111111","title_slug":"kth-largest-element-in-an-array","has_notes":false,"flag_type":1}