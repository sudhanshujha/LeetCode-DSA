{"id":1183871483,"question_id":215,"lang":"java","lang_name":"Java","time":"1 month, 3 weeks","timestamp":1708682127,"status":10,"status_display":"Accepted","runtime":"2163 ms","url":"/submissions/detail/1183871483/","is_pending":"Not Pending","title":"Kth Largest Element in an Array","memory":"57.5 MB","code":"// quick select ago\npublic class Solution {\n    public int findKthLargest(int[] nums, int k) {\n        int left = 0, right = nums.length - 1;\n        Random rand = new Random();\n        while (true) {\n            int pivot_index = left + rand.nextInt(right - left + 1);\n            int new_pivot_index = partition(nums, left, right, pivot_index);\n            if (new_pivot_index == nums.length - k) {\n                return nums[new_pivot_index];\n            } else if (new_pivot_index > nums.length - k) {\n                right = new_pivot_index - 1;\n            } else {\n                left = new_pivot_index + 1;\n            }\n        }\n    }\n\n    private int partition(int[] nums, int left, int right, int pivot_index) {\n        int pivot = nums[pivot_index];\n        swap(nums, pivot_index, right);\n        int stored_index = left;\n        for (int i = left; i < right; i++) {\n            if (nums[i] < pivot) {\n                swap(nums, i, stored_index);\n                stored_index++;\n            }\n        }\n        swap(nums, right, stored_index);\n        return stored_index;\n    }\n\n    private void swap(int[] nums, int i, int j) {\n        int temp = nums[i];\n        nums[i] = nums[j];\n        nums[j] = temp;\n    }\n}","compare_result":"11111111111111111111111111111111111111111","title_slug":"kth-largest-element-in-an-array","has_notes":false,"flag_type":1}