{"id":1192783603,"question_id":62,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1709482678,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1192783603/","is_pending":"Not Pending","title":"Unique Paths","memory":"40 MB","code":"class Solution {\n    public int uniquePaths(int m, int n) {\n        // dp[i][j] stores no of unique ways to reach finish assuming dp[i][j] is the finish\n        int dp[][] = new int[m][n];\n        // Arrays.fill(dp, 1); can be done for 1d array only\n        for(int i=0; i<m; i++){\n            dp[i][0]=1;\n        }\n        for(int i=0; i<n; i++){\n            dp[0][i]=1;\n        }\n\n        for(int i=1; i<m; i++){\n            for(int j=1; j<n; j++){\n                dp[i][j] = dp[i-1][j]+dp[i][j-1];\n            }\n        }\n       return dp[m-1][n-1]; \n    }\n}\n// another way is (m+n)!/m!n! of rows & colns","compare_result":"111111111111111111111111111111111111111111111111111111111111111","title_slug":"unique-paths","has_notes":false,"flag_type":1}