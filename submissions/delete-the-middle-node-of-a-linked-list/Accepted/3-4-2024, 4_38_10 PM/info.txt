{"id":1193510132,"question_id":2216,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1709550490,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1193510132/","is_pending":"Not Pending","title":"Delete the Middle Node of a Linked List","memory":"64.2 MB","code":"class Solution {\n    public ListNode deleteMiddle(ListNode head) {\n        if (head == null || head.next == null) {\n            return null; // No middle node to delete\n        }\n\n        ListNode slow = head;\n        ListNode fast = head;\n        ListNode temp = null; // To keep track of the node before slow\n\n        // Move slow by one step and fast by two steps until fast reaches the end\n        while (fast != null && fast.next != null) {\n            temp = slow;\n            slow = slow.next;\n            fast = fast.next.next;\n        }\n\n        // Now, slow is pointing to the middle node\n        // Delete the middle node by modifying the next pointer of the node before it\n        temp.next = slow.next;\n\n        return head; // Return the head of the modified list\n    }\n}\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"delete-the-middle-node-of-a-linked-list","has_notes":false,"flag_type":1}