{"id":1185901677,"question_id":2038,"lang":"java","lang_name":"Java","time":"1 month, 2 weeks","timestamp":1708876527,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/1185901677/","is_pending":"Not Pending","title":"Nearest Exit from Entrance in Maze","memory":"45.5 MB","code":"import java.util.LinkedList;\nimport java.util.Queue;\n\nclass Solution {\n    public int nearestExit(char[][] maze, int[] entrance) {\n        int rows = maze.length;\n        int cols = maze[0].length;\n        int[][] dirs = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}}; // Directions: right, down, left, up\n        \n        Queue<int[]> queue = new LinkedList<>();\n        queue.offer(new int[]{entrance[0], entrance[1], 0}); // Cell coordinates and distance from entrance\n        \n        maze[entrance[0]][entrance[1]] = '+'; // Mark entrance as visited\n        \n        while (!queue.isEmpty()) {\n            int[] cell = queue.poll();\n            int x = cell[0];\n            int y = cell[1];\n            int distance = cell[2];\n            \n            for (int[] dir : dirs) {\n                int newX = x + dir[0];\n                int newY = y + dir[1];\n                \n                if (newX >= 0 && newX < rows && newY >= 0 && newY < cols && maze[newX][newY] == '.') {\n                    if (newX == 0 || newX == rows - 1 || newY == 0 || newY == cols - 1) {\n                        return distance + 1; // Found exit\n                    }\n                    \n                    maze[newX][newY] = '+'; // Mark visited\n                    queue.offer(new int[]{newX, newY, distance + 1});\n                }\n            }\n        }\n        \n        return -1; // No exit found\n    }\n}\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"nearest-exit-from-entrance-in-maze","has_notes":false,"flag_type":1}