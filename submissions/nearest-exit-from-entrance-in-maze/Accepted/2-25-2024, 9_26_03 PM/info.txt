{"id":1185902120,"question_id":2038,"lang":"java","lang_name":"Java","time":"1 month, 2 weeks","timestamp":1708876563,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/1185902120/","is_pending":"Not Pending","title":"Nearest Exit from Entrance in Maze","memory":"46 MB","code":"class Solution {\n    public int nearestExit(char[][] maze, int[] entrance) {\n        int rows = maze.length;\n        int columns = maze[0].length;\n\n        Queue<int[]> queue = new LinkedList<>();\n        queue.offer(entrance);\n        maze[entrance[0]][entrance[1]] = '+';\n\n        int[][] directions = new int[][] {{0,1},{0,-1},{1,0},{-1,0}};\n\n        int steps = 0;\n        int x, y;\n        while (!queue.isEmpty()) {\n            steps++;\n\n            int n = queue.size();\n            for (int i = 0; i < n; i++) {\n                int[] current = queue.poll();\n\n                for (int[] direction : directions) {\n                    x = current[0] + direction[0];\n                    y = current[1] + direction[1];\n\n                    if (x < 0 || x >= rows || y < 0 || y >= columns) continue;\n                    if (maze[x][y] == '+') continue;\n\n                    if (x == 0 || x == rows - 1 || y == 0 || y == columns - 1) return steps;\n\n                    maze[x][y] = '+';\n                    queue.offer(new int[]{x, y});\n                }\n            }\n        }\n        return -1;\n    }\n}\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"nearest-exit-from-entrance-in-maze","has_notes":false,"flag_type":1}