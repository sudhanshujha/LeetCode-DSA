{"id":1185940654,"question_id":2038,"lang":"java","lang_name":"Java","time":"1 month, 2 weeks","timestamp":1708879396,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/1185940654/","is_pending":"Not Pending","title":"Nearest Exit from Entrance in Maze","memory":"45.2 MB","code":"class Pair{\n    int first;\n    int second;\n    int step;\n    Pair(int fst,int scnd,int step){\n        this.first=fst;\n        this.second=scnd;\n        this.step=step;\n    }\n}\n\nclass Solution {\n    public int nearestExit(char[][] maze, int[] entrance) {\n        int n=maze.length;\n        int m=maze[0].length;\n\n        int x=entrance[0];\n        int y=entrance[1];\n\n        int delRow[]={1,-1,0,0};\n        int delCol[]={0,0,1,-1};\n        \n        int ans=0;\n        \n        Queue<Pair>q=new LinkedList<Pair>();\n        q.add(new Pair(x,y,0));\n        \n        while(!q.isEmpty()){\n            int row=q.peek().first;\n            int col=q.peek().second;\n            int step=q.peek().step;\n            maze[row][col]='+';\n\n            \n            q.poll();\n\n            for(int i=0;i<4;i++){\n                int nrow=row+delRow[i];\n                int ncol=col+delCol[i];\n\n                if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && maze[nrow][ncol]=='.'){\n                    maze[nrow][ncol]='+';\n                    q.add(new Pair(nrow,ncol,step+1));\n                    \n                    \n                    if(nrow==0 || ncol==0 || nrow==n-1 || ncol==m-1){\n                        ans=step+1;\n                        return ans;\n                    }  \n                    \n                }\n\n            }\n            \n        }\n        return -1;\n\n\n    }\n\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"nearest-exit-from-entrance-in-maze","has_notes":false,"flag_type":1}