{"id":1232297201,"question_id":15,"lang":"java","lang_name":"Java","time":"1 day, 18 hours","timestamp":1713107181,"status":10,"status_display":"Accepted","runtime":"31 ms","url":"/submissions/detail/1232297201/","is_pending":"Not Pending","title":"3Sum","memory":"51 MB","code":"class Solution {\n    public List<List<Integer>> threeSum(int[] nums) {\n        List<List<Integer>> res = new ArrayList<>();\n        Arrays.sort(nums); // Sort the array to easily handle duplicates and for binary search\n        \n        for (int i = 0; i < nums.length - 2; i++) {\n            // Skip duplicates\n            if (i > 0 && nums[i] == nums[i - 1]) {\n                continue;\n            }\n            \n            int target = -nums[i];\n            int left = i + 1;\n            int right = nums.length - 1;\n            \n            while (left < right) {\n                int sum = nums[left] + nums[right];\n                \n                if (sum == target) {\n                    res.add(Arrays.asList(nums[i], nums[left], nums[right]));\n                    left++;\n                    right--;\n                    \n                    // Skip duplicates\n                    while (left < right && nums[left] == nums[left - 1]) {\n                        left++;\n                    }\n                    while (left < right && nums[right] == nums[right + 1]){\n                        right--;\n                    }\n                } else if (sum < target) {\n                    left++;\n                } else {\n                    right--;\n                }\n            }\n        }\n        \n        return res;\n    }\n}\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"3sum","has_notes":false,"flag_type":1}