{"id":1199675630,"question_id":523,"lang":"java","lang_name":"Java","time":"1Â month","timestamp":1710082263,"status":10,"status_display":"Accepted","runtime":"21 ms","url":"/submissions/detail/1199675630/","is_pending":"Not Pending","title":"Continuous Subarray Sum","memory":"57.3 MB","code":"// 2 ptr\nclass Solution {\n    public boolean checkSubarraySum(int[] nums, int k) {\n        int sum = 0;\n        int start = 0;\n        Map<Integer, Integer> map = new HashMap<>();\n        map.put(0, -1); // Initialize the map with the sum 0 at index -1\n        \n        for (int i = 0; i < nums.length; i++) {\n            sum += nums[i];\n            if (k != 0) sum %= k; // Handle the case when k is not 0\n            \n            if (map.containsKey(sum)) {\n                if (i - map.get(sum) > 1) return true; // Check if subarray length is at least 2\n            } else {\n                map.put(sum, i);\n            }\n        }\n        \n        return false;\n    }\n}\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"continuous-subarray-sum","has_notes":false,"flag_type":1}