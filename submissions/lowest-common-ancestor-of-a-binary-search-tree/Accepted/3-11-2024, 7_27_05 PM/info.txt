{"id":1200569320,"question_id":235,"lang":"java","lang_name":"Java","time":"1Â month","timestamp":1710165425,"status":10,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/1200569320/","is_pending":"Not Pending","title":"Lowest Common Ancestor of a Binary Search Tree","memory":"44.9 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n  public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n    if (root == null) { return null; }\n    if (root.val > p.val && root.val > q.val) {\n      return lowestCommonAncestor(root.left, p, q);\n    } else if (root.val < p.val && root.val < q.val) {\n      return lowestCommonAncestor(root.right, p, q);\n    } else {\n      return root;\n    }\n  }\n}","compare_result":"111111111111111111111111111111","title_slug":"lowest-common-ancestor-of-a-binary-search-tree","has_notes":false,"flag_type":1}