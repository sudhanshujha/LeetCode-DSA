{"id":1200568049,"question_id":235,"lang":"java","lang_name":"Java","time":"1Â month","timestamp":1710165334,"status":10,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/1200568049/","is_pending":"Not Pending","title":"Lowest Common Ancestor of a Binary Search Tree","memory":"44.7 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\n\nclass Solution {\n    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n        if (root == null || root == p || root == q)\n            return root;\n        TreeNode left = null, right =null;\n        if(p.val < root.val || q.val < root.val)\n            left = lowestCommonAncestor(root.left, p, q);\n        if(p.val > root.val || q.val > root.val)\n            right = lowestCommonAncestor(root.right, p, q);\n        if(left!= null && right!= null)\n            return root; // Current node is lca\n        else if (left != null) \n            return left; // lca found in left subtree\n        else \n            return right; // lca found in right subtree \n    }\n}","compare_result":"111111111111111111111111111111","title_slug":"lowest-common-ancestor-of-a-binary-search-tree","has_notes":false,"flag_type":1}