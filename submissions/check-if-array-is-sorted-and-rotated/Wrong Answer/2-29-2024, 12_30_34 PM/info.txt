{"id":1189440960,"question_id":1878,"lang":"java","lang_name":"Java","time":"1 month, 2 weeks","timestamp":1709190034,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1189440960/","is_pending":"Not Pending","title":"Check if Array Is Sorted and Rotated","memory":"N/A","code":"class Solution {\n    public boolean check(int[] nums) {\n        int n = nums.length;\n        int minIdx = findMinimumIndex(nums);\n        \n        // If the array is already sorted, or has only one element, it's considered rotated 0 times\n        if (minIdx == 0 || n == 1) {\n            return true;\n        }\n        \n        // Check if the array is non-decreasing before and after the rotation point\n        for (int i = 1; i < n; i++) {\n            int prev = nums[(minIdx + i - 1) % n];\n            int curr = nums[(minIdx + i) % n];\n            if (prev > curr) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n    \n    private int findMinimumIndex(int[] nums) {\n        int left = 0, right = nums.length - 1;\n        \n        // Binary search to find the minimum element (rotation point)\n        while (left < right) {\n            int mid = left + (right - left) / 2;\n            if (nums[mid] > nums[right]) {\n                left = mid + 1;\n            } else if (nums[mid] < nums[right]) {\n                right = mid;\n            } else { // If nums[mid] == nums[right], decrement right\n                right--;\n            }\n        }\n        \n        return left;\n    }\n}\n","compare_result":"111111111111111111111111111111011111111111111111111111111111111111111111111111111111111111111111111101111111","title_slug":"check-if-array-is-sorted-and-rotated","has_notes":false,"flag_type":1}