{"id":1203586250,"question_id":437,"lang":"java","lang_name":"Java","time":"1Â month","timestamp":1710430436,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1203586250/","is_pending":"Not Pending","title":"Path Sum III","memory":"44.7 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    HashMap<Long,Integer> map=new HashMap<>();\n    int count;\n    public int pathSum(TreeNode root, int targetSum) {\n      if(root==null){\n        return 0;\n      }  \n      count=0;\n      helper(root,targetSum,0);\n      return count;\n    }\n    private void helper(TreeNode root,int t,long cs){\n        if(root==null){\n            return;\n        }\n        cs+=root.val;\n        if(map.containsKey(cs-t)){\n            count+=map.get(cs-t);\n        }\n        if(t==cs){\n            count++;\n        }\n        map.put(cs,map.getOrDefault(cs,0)+1);\n        helper(root.left,t,cs);\n        helper(root.right,t,cs);\n        map.put(cs,map.get(cs)-1);\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"path-sum-iii","has_notes":false,"flag_type":1}