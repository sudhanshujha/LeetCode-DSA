{"id":1188536945,"question_id":90,"lang":"java","lang_name":"Java","time":"1 month, 2 weeks","timestamp":1709109841,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1188536945/","is_pending":"Not Pending","title":"Subsets II","memory":"43 MB","code":"class Solution {\n    public List<List<Integer>> subsetsWithDup(int[] nums) {\n        List<List<Integer>> op = new ArrayList<>();\n        List<Integer> ds = new ArrayList<>();\n        Arrays.sort(nums); // Sorting the input array to handle duplicates\n        helper(0, nums, ds, op);\n        return op;\n    }\n    // i for index\n     public static void helper(int index, int[] arr, List<Integer> ds, List<List<Integer>> op){\n        if(index==arr.length){\n            op.add(new ArrayList<>(ds));    // // Add current subset to the result\n            // cal by reference precaution\n            return;\n        }\n        ds.add(arr[index]); // // Include the current element\n        helper(index+1, arr, ds, op);   // // Recur with the next index\n        ds.remove(ds.size() - 1);\n        // excluding the element is done by removing the last added element in rec decision tree branch\n\n        // Skip duplicates by checking if the current element is equal to the previous one\n        while(index + 1 < arr.length && arr[index] == arr[index + 1]) {\n            index++; // Move to the next different element\n        }\n\n        helper(index+1, arr, ds, op);\n        \n    }\n}","compare_result":"11111111111111111111","title_slug":"subsets-ii","has_notes":false,"flag_type":1}