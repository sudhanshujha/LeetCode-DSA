{"id":1184690237,"question_id":907,"lang":"java","lang_name":"Java","time":"1 month, 3 weeks","timestamp":1708766966,"status":10,"status_display":"Accepted","runtime":"25 ms","url":"/submissions/detail/1184690237/","is_pending":"Not Pending","title":"Koko Eating Bananas","memory":"45.1 MB","code":"class Solution {\n    public int minEatingSpeed(int[] piles, int h) {\n    // start making equi sized groups of k size with k starting from 1 till max of array, \n    // return when the ans matches with h\n\n    int k = 1;\n    int htemp;\n    int max = piles[0];\n    for(int i=0; i<piles.length; i++){\n        if(piles[i]>max)\n            max = piles[i];\n    }\n\n    int low = 1;\n    int high = max;\n\n    while(low<=high){\n        \n        int mid = low + (high -low)/2;\n        htemp = eatKoko(mid,piles);\n\n        if(htemp<=h){\n            high=mid-1;\n        }\n        else if(htemp>h){\n            low=mid+1;\n        }\n    }\n    return low;\n    // if(k > max array) return -1\n    // if htemp = h -> return k \n    }\n    int eatKoko(int k,int[] piles){\n        int htemp=0;\n        for(int i=0;i<piles.length;i++){\n            htemp+= Math.ceil((double)piles[i]/k);            \n        }\n        return htemp;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"koko-eating-bananas","has_notes":true,"flag_type":1}