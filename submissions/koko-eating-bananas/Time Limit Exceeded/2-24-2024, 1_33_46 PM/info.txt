{"id":1184640637,"question_id":907,"lang":"java","lang_name":"Java","time":"1 month, 3 weeks","timestamp":1708761826,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1184640637/","is_pending":"Not Pending","title":"Koko Eating Bananas","memory":"N/A","code":"class Solution {\n    public int minEatingSpeed(int[] piles, int h) {\n    // start making equi sized groups of k size with k starting from 1 till max of array, \n    // return when the ans matches with h\n\n    int k = 1;\n    int htemp;\n    int max = piles[0];\n    for(int i=0;i<piles.length;i++){\n        if(piles[i]>max)\n            max = piles[i];\n    }\n    while(k<=max){\n        htemp = eatKoko(k,piles);\n        if (htemp <= h)\n            return k;\n        k++;\n    }\n    return k;\n    // if(k > max array) return -1\n    // if htemp = h -> return k \n    }\n    int eatKoko(int k,int[] piles){\n        int htemp=0;\n        for(int i=0;i<piles.length;i++){\n            htemp+= Math.ceil((double)piles[i]/k);            \n        }\n        return htemp;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000000000","title_slug":"koko-eating-bananas","has_notes":false,"flag_type":1}