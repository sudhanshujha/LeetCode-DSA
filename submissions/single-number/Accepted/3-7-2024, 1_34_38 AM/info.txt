{"id":1196074054,"question_id":136,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1709755478,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1196074054/","is_pending":"Not Pending","title":"Single Number","memory":"45.9 MB","code":"// 1. using hashmaps wherever fre =1 return - O(n) space\n// 2. Sort the array.\n// Traverse the array and check if one of the adjacent elements is equal to the current element or not.\n// If yes , move ahead. Else return the current element.\n\n// class Solution {\n//     public int singleNumber(int[] nums) {\n//         Arrays.sort(nums);\n//         int n =nums.length;\n//         for(int i=1; i<n; i+=2){\n//             if(nums[i-1]!=nums[i])\n//                 return nums[i-1]; \n//         }\n//         return nums[n-1];\n//     }\n// }\n\nclass Solution {\n    public int singleNumber(int[] nums) {\n        int n = nums.length;\n        int ans = 0;\n        for(int i:nums){\n            ans^=i;\n        }\n        return ans;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111","title_slug":"single-number","has_notes":false,"flag_type":1}