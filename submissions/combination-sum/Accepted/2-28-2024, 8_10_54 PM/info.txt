{"id":1188772905,"question_id":39,"lang":"java","lang_name":"Java","time":"1 month, 2 weeks","timestamp":1709131254,"status":10,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/1188772905/","is_pending":"Not Pending","title":"Combination Sum","memory":"44.7 MB","code":"import java.util.ArrayList;\nimport java.util.List;\n\nclass Solution {\n    public static List<List<Integer>> combinationSum(int[] candidates, int target) {\n        List<List<List<Integer>>> dp = new ArrayList<>();\n        for (int i = 0; i <= target; i++) {\n            dp.add(new ArrayList<>()); // Initialize with empty lists\n        }\n\n        dp.get(0).add(new ArrayList<>()); // One empty combination for sum 0\n\n        for (int num : candidates) {\n            for (int i = num; i <= target; i++) {\n                for (List<Integer> combination : dp.get(i - num)) {\n                    List<Integer> newCombination = new ArrayList<>(combination);\n                    newCombination.add(num);\n                    dp.get(i).add(newCombination);\n                }\n            }\n        }\n\n        return dp.get(target); // Final combinations for the target sum\n    }\n}\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"combination-sum","has_notes":false,"flag_type":1}