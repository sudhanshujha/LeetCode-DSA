{"id":1187611670,"question_id":39,"lang":"java","lang_name":"Java","time":"1 month, 2 weeks","timestamp":1709029662,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1187611670/","is_pending":"Not Pending","title":"Combination Sum","memory":"44.5 MB","code":"//  https://leetcode.com/problems/combination-sum/solutions/16502/a-general-approach-to-backtracking-questions-in-java-subsets-permutations-combination-sum-palindrome-partitioning\nclass Solution {\n    public List<List<Integer>> combinationSum(int[] candidates, int target) {\n        List <List<Integer>> op = new ArrayList<>();\n        List <Integer> ds = new ArrayList<>();\n        helper(0, candidates, target, ds, op);\n        return op;\n    }\n\n    public static void helper(int index, int[] candidates, int target, List<Integer> ds,List<List<Integer>> op){\n        //base\n        if(index==candidates.length){\n            if(target==0){\n                op.add(new ArrayList<>(ds));\n                // op.add(ds) any changes made to ds afterwards will reflect in all the lists inside op. \n                // By creating a new ArrayList with new ArrayList<>(ds), you're essentially creating a copy of ds at that moment, \n                // ensuring that further modifications to ds won't affect the elements already added to op.\n            }\n            return;\n        }\n        // included \n        if(candidates[index] <= target){\n            ds.add(candidates[index]);\n            helper(index, candidates, target - candidates[index], ds, op);\n            ds.remove(ds.size() - 1);\n            // ds.clear() would indeed clear the ds list, but it would affect all the previous states stored in op as Java works with references.\n            // undoing the addition made in the current recursive call without affecting previous states stored in op.\n        }\n        //excluded\n        helper(index+1, candidates, target, ds, op);\n    }\n}\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"combination-sum","has_notes":false,"flag_type":1}