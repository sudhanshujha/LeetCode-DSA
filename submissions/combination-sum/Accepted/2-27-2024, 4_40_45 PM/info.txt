{"id":1187636982,"question_id":39,"lang":"java","lang_name":"Java","time":"1 month, 2 weeks","timestamp":1709032245,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1187636982/","is_pending":"Not Pending","title":"Combination Sum","memory":"44.8 MB","code":"//using dp\nclass Solution {\n    public List<List<Integer>> combinationSum(int[] candidates, int target) {\n        List<List<Integer>>[] dp = new List[target + 1];\n        dp[0] = new ArrayList<>();\n        dp[0].add(new ArrayList<>());\n          \n        for (int c : candidates) {\n            for (int i = c; i <= target; i++) {\n                if (dp[i - c] != null) {\n                    if (dp[i] == null)\n                        dp[i] = new ArrayList<>();\n                                    \n                    for (List<Integer> list : dp[i - c]) {\n                        List<Integer> copy = new ArrayList<>(list);\n                        copy.add(c);\n                        \n                        dp[i].add(copy);\n                    }\n                }\n            }            \n        } \n        \n        return dp[target] == null ? new ArrayList<>() : dp[target];\n    }\n}\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"combination-sum","has_notes":false,"flag_type":1}