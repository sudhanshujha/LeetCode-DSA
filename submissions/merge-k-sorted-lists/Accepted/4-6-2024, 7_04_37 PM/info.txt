{"id":1224836102,"question_id":23,"lang":"java","lang_name":"Java","time":"1 week, 2 days","timestamp":1712410477,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1224836102/","is_pending":"Not Pending","title":"Merge k Sorted Lists","memory":"44.4 MB","code":"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode mergeKLists(ListNode[] lists) {\n        // note how we dealt with problem of faing null in end of each array list part by putting all of them in queue first\n        \n        if (lists==null||lists.length==0) return null;\n        \n        PriorityQueue<ListNode> queue= new PriorityQueue<ListNode>(lists.length, new Comparator<ListNode>(){\n            @Override\n            public int compare(ListNode o1,ListNode o2){\n                if (o1.val<o2.val)\n                    return -1;\n                else if (o1.val==o2.val)\n                    return 0;\n                else \n                    return 1;\n            }\n        });  \n        ListNode dummy = new ListNode(0);\n        ListNode tail=dummy;\n        \n        for (ListNode node:lists)\n            if (node!=null)\n                queue.add(node);\n            \n        while (!queue.isEmpty()){\n            tail.next=queue.poll();\n            tail=tail.next;\n            \n            if (tail.next!=null)\n                queue.add(tail.next);\n        }\n        return dummy.next;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"merge-k-sorted-lists","has_notes":false,"flag_type":1}