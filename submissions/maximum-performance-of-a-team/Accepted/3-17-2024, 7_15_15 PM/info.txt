{"id":1206345704,"question_id":1499,"lang":"java","lang_name":"Java","time":"4 weeks, 1 day","timestamp":1710683115,"status":10,"status_display":"Accepted","runtime":"40 ms","url":"/submissions/detail/1206345704/","is_pending":"Not Pending","title":"Maximum Performance of a Team","memory":"58.2 MB","code":"import java.util.*;\n\nclass Solution {\n    public int maxPerformance(int n, int[] speed, int[] efficiency, int k) {\n        final long MOD = 1_000_000_007;\n        \n        // Create a list of pairs to store efficiency and speed together\n        List<Pair> pairs = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            pairs.add(new Pair(efficiency[i], speed[i]));\n        }\n        \n        // Sort the pairs by efficiency in descending order\n        Collections.sort(pairs, new PairComparator());\n        \n        // Create a min heap to store the speeds\n        PriorityQueue<Integer> speedHeap = new PriorityQueue<>();\n        \n        long speedSum = 0;\n        long maxPerformance = 0;\n        \n        // Iterate through the pairs\n        for (Pair pair : pairs) {\n            speedSum += pair.speed;\n            speedHeap.offer(pair.speed);\n            \n            // If the size of the heap exceeds k, remove the smallest speed\n            if (speedHeap.size() > k) {\n                speedSum -= speedHeap.poll();\n            }\n            \n            // Update the maximum performance\n            maxPerformance = Math.max(maxPerformance, speedSum * pair.efficiency);\n        }\n        \n        // Return the maximum performance modulo MOD\n        return (int) (maxPerformance % MOD);\n    }\n    \n    // Custom comparator class for sorting pairs by efficiency in descending order\n    class PairComparator implements Comparator<Pair> {\n        public int compare(Pair a, Pair b) {\n            return b.efficiency - a.efficiency;\n        }\n    }\n    \n    // Pair class to store efficiency and speed together\n    class Pair {\n        int efficiency;\n        int speed;\n        \n        public Pair(int efficiency, int speed) {\n            this.efficiency = efficiency;\n            this.speed = speed;\n        }\n    }\n}\n","compare_result":"1111111111111111111111111111111111111111111111111111111","title_slug":"maximum-performance-of-a-team","has_notes":false,"flag_type":1}