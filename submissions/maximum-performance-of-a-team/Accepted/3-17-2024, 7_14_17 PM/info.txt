{"id":1206345043,"question_id":1499,"lang":"java","lang_name":"Java","time":"4 weeks, 1 day","timestamp":1710683057,"status":10,"status_display":"Accepted","runtime":"39 ms","url":"/submissions/detail/1206345043/","is_pending":"Not Pending","title":"Maximum Performance of a Team","memory":"58.2 MB","code":"import java.util.*;\n\nclass Solution {\n    public int maxPerformance(int n, int[] s, int[] e, int k) {\n        // final long MOD = 1_000_000_007;\n        \n        // Create an array of pairs to store efficiency and speed together\n        int[][] pairs = new int[n][2];\n        for (int i = 0; i < n; i++) {\n            pairs[i][0] = e[i];  // Efficiency\n            pairs[i][1] = s[i];  // Speed\n        }\n        \n        // Sort the pairs by efficiency in descending order\n        Arrays.sort(pairs, (a, b) -> b[0] - a[0]);\n        \n        // Create a min heap to store the speeds\n        PriorityQueue<Integer> speedHeap = new PriorityQueue<>();\n        \n        long speedSum = 0;\n        long maxPerformance = 0;\n        \n        // Iterate through the pairs\n        for (int[] pair : pairs) {\n            speedSum += pair[1];\n            speedHeap.offer(pair[1]);\n            \n            // If the size of the heap exceeds k, remove the smallest speed\n            if (speedHeap.size() > k) {\n                speedSum -= speedHeap.poll();\n            }\n            \n            // Update the maximum performance\n            maxPerformance = Math.max(maxPerformance, speedSum * pair[0]);\n        }\n        \n        // Return the maximum performance modulo MOD\n        return (int) (maxPerformance % (long)(1e9 + 7));\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111","title_slug":"maximum-performance-of-a-team","has_notes":false,"flag_type":1}