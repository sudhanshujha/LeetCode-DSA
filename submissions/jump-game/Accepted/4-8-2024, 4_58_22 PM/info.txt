{"id":1226634277,"question_id":55,"lang":"java","lang_name":"Java","time":"1Â week","timestamp":1712575702,"status":10,"status_display":"Accepted","runtime":"66 ms","url":"/submissions/detail/1226634277/","is_pending":"Not Pending","title":"Jump Game","memory":"45.3 MB","code":"class Solution {\n    public boolean canJump(int[] nums) {\n        int n = nums.length;\n        // Create a DP array to store whether it's possible to reach each index\n        boolean[] dp = new boolean[n];\n        // Base case: it's always possible to reach the last index\n        dp[n - 1] = true;\n        \n        // Traverse the array from right to left\n        for (int i = n - 2; i >= 0; i--) {\n            // Calculate the maximum jump from index i\n            int maxJump = Math.min(i + nums[i], n - 1);\n            // Check if it's possible to reach any of the indices within the maximum jump range\n            for (int j = i + 1; j <= maxJump; j++) {\n                // If it's possible to reach index j and from there reach the end, mark index i as reachable\n                if (dp[j]) {\n                    dp[i] = true;\n                    break;\n                }\n            }\n        }\n        \n        // If it's possible to reach index 0, return true; otherwise, return false\n        return dp[0];\n    }\n}\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"jump-game","has_notes":false,"flag_type":1}