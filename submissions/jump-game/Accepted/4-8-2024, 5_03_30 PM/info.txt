{"id":1226637266,"question_id":55,"lang":"java","lang_name":"Java","time":"1Â week","timestamp":1712576010,"status":10,"status_display":"Accepted","runtime":"81 ms","url":"/submissions/detail/1226637266/","is_pending":"Not Pending","title":"Jump Game","memory":"45.2 MB","code":"class Solution {\n    public boolean canJump(int[] nums) {\n        int n = nums.length;\n        \n        // Base case: it's always possible to reach the last index\n        nums[n - 1] = -1; // Mark the last index as reachable\n        \n        // Traverse the array from right to left\n        for (int i = n - 2; i >= 0; i--) {\n            // If the value at index i is non-negative, it means it's reachable\n            if (nums[i] >= 0) {\n                // Update the indices within the maximum jump range from index i\n                for (int j = 1; j <= nums[i]; j++) {\n                    // If the target index is within bounds and it's marked as reachable (-1),\n                    // mark index i as reachable and break the loop\n                    if (i + j < n && nums[i + j] == -1) {\n                        nums[i] = -1;\n                        break;\n                    }\n                }\n            }\n        }\n        \n        // If index 0 is reachable, return true; otherwise, return false\n        return nums[0] == -1;\n    }\n}\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"jump-game","has_notes":false,"flag_type":1}