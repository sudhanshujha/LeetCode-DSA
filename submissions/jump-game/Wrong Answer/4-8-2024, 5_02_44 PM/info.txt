{"id":1226636836,"question_id":55,"lang":"java","lang_name":"Java","time":"1Â week","timestamp":1712575964,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1226636836/","is_pending":"Not Pending","title":"Jump Game","memory":"N/A","code":"// Dp solution - recursive method by exploring all possibilities but memoization\nclass Solution {\n    public boolean canJump(int[] nums) {\n        int n = nums.length;\n        // Base case: it's always possible to reach the last index\n        nums[n - 1] = -nums[n - 1];\n        \n        // Traverse the array from right to left\n        for (int i = n - 2; i >= 0; i--) {\n            // If nums[i] is already negative, it means it's reachable from a previous index, so continue to the next iteration\n            if (nums[i] < 0) continue;\n            \n            // Calculate the maximum jump from index i\n            int maxJump = Math.min(i + nums[i], n - 1);\n            // Check if it's possible to reach any of the indices within the maximum jump range\n            for (int j = i + 1; j <= maxJump; j++) {\n                // If it's possible to reach index j and from there reach the end, mark index i as reachable by making nums[i] negative\n                if (nums[j] < 0) {\n                    nums[i] = -nums[i];\n                    break;\n                }\n            }\n        }\n        \n        // If nums[0] is negative, it means it's possible to reach the start of the array from the end; otherwise, return false\n        return nums[0] < 0;\n    }\n}\n","compare_result":"1101110110111111001110111111110111111111011111111111111111111110111111110111101110011111111111111011111111101111101111101111101101110111110101111011111111101111111011011111","title_slug":"jump-game","has_notes":false,"flag_type":1}