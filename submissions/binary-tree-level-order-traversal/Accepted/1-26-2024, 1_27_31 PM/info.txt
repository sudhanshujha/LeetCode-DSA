{"id":1157202677,"question_id":102,"lang":"java","lang_name":"Java","time":"2 months, 3 weeks","timestamp":1706255851,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1157202677/","is_pending":"Not Pending","title":"Binary Tree Level Order Traversal","memory":"44.9 MB","code":"import java.util.LinkedList;\nimport java.util.List;\nimport java.util.Queue;\n\nclass Solution {\n    public List<List<Integer>> levelOrder(TreeNode root) {\n        List<List<Integer>> levelOrderList = new ArrayList<>();\n\n        if (root == null) {\n            return levelOrderList; // Return an empty list if the tree is empty\n        }\n\n        Queue<TreeNode> queue = new LinkedList<>();\n        queue.add(root);\n\n        while (!queue.isEmpty()) {\n            int levelSize = queue.size(); // Queue size indicates the number of nodes at the current level\n            List<Integer> eachLevel = new ArrayList<>();\n\n            for (int i = 0; i < levelSize; i++) {\n                TreeNode current = queue.poll();\n                eachLevel.add(current.val);\n\n                if (current.left != null) {\n                    queue.add(current.left);\n                }\n                if (current.right != null) {\n                    queue.add(current.right);\n                }\n            }\n\n            levelOrderList.add(eachLevel); // Add the current level to the result list\n        }\n\n        return levelOrderList;\n    }\n}\n","compare_result":"11111111111111111111111111111111111","title_slug":"binary-tree-level-order-traversal","has_notes":false,"flag_type":1}