{"id":1213582175,"question_id":680,"lang":"java","lang_name":"Java","time":"3Â weeks","timestamp":1711381063,"status":10,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/1213582175/","is_pending":"Not Pending","title":"Valid Palindrome II","memory":"45.1 MB","code":"class Solution {\n    public boolean validPalindrome(String s) {\n        int i = 0;\n        int j = s.length() - 1;\n        \n        while (i < j) {\n            if (s.charAt(i) == s.charAt(j)) {\n                i++;\n                j--;\n            } else {\n                // Try removing either character at i or j\n                return isPalindrome(s, i + 1, j) || isPalindrome(s, i, j - 1);\n            }\n        }\n        \n        // If the loop completes, the string is a valid palindrome\n        return true;\n    }\n    \n    private boolean isPalindrome(String s, int start, int end) {\n        while (start < end) {\n            if (s.charAt(start) != s.charAt(end)) {\n                return false;\n            }\n            start++;\n            end--;\n        }\n        return true;\n    }\n}\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"valid-palindrome-ii","has_notes":false,"flag_type":1}